   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"keyboard.c"
  21              	.Ltext0:
  22              		.file 1 "../keyboard.c"
 1955              		.align	2
 1958              	keyboard_base:
 1959 0000 00000006 		.word	100663296
 1960              		.comm	key,4,4
 1961              		.text
 1962              		.align	2
 1963              		.global	keyboard_init
 1965              	keyboard_init:
 1966              	.LFB0:
   1:../keyboard.c **** /*--- Ficheros de cabecera ---*/
   2:../keyboard.c **** #include "44b.h"
   3:../keyboard.c **** #include "44blib.h"
   4:../keyboard.c **** #include "def.h"
   5:../keyboard.c **** /*--- Definición de macros ---*/
   6:../keyboard.c **** #define KEY_VALUE_MASK 0xF
   7:../keyboard.c **** /*--- Variables globales ---*/
   8:../keyboard.c **** volatile UCHAR *keyboard_base = (UCHAR *)0x06000000;
   9:../keyboard.c **** int key;
  10:../keyboard.c **** /*--- Funciones externas ---*/
  11:../keyboard.c **** extern int numbers[4];
  12:../keyboard.c **** void D8Led_symbol(int value);
  13:../keyboard.c **** void D8Led_symbol_acierto(int value);
  14:../keyboard.c **** /*--- Declaracion de funciones ---*/
  15:../keyboard.c **** void keyboard_init();
  16:../keyboard.c **** void KeyboardInt(void) __attribute__ ((interrupt ("IRQ")));
  17:../keyboard.c **** int key_read();
  18:../keyboard.c **** /*--- Codigo de las funciones ---*/
  19:../keyboard.c **** void keyboard_init()
  20:../keyboard.c **** {
 1967              		.loc 1 20 0
 1968              		.cfi_startproc
 1969              		@ Function supports interworking.
 1970              		@ args = 0, pretend = 0, frame = 0
 1971              		@ frame_needed = 1, uses_anonymous_args = 0
 1972 0000 0DC0A0E1 		mov	ip, sp
 1973              	.LCFI0:
 1974              		.cfi_def_cfa_register 12
 1975 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1976 0008 04B04CE2 		sub	fp, ip, #4
 1977              		.cfi_offset 14, -8
 1978              		.cfi_offset 13, -12
 1979              		.cfi_offset 11, -16
 1980              	.LCFI1:
 1981              		.cfi_def_cfa 11, 4
  21:../keyboard.c **** 	/* Configurar el puerto G (si no lo estuviese ya) */	
  22:../keyboard.c **** 		// Establece la funcion de los pines (EINT0-7)
  23:../keyboard.c **** 	rPCONG = rPCONG | 0xC;
 1982              		.loc 1 23 0
 1983 000c 80309FE5 		ldr	r3, .L2
 1984 0010 7C209FE5 		ldr	r2, .L2
 1985 0014 002092E5 		ldr	r2, [r2, #0]
 1986 0018 0C2082E3 		orr	r2, r2, #12
 1987 001c 002083E5 		str	r2, [r3, #0]
  24:../keyboard.c **** 		// Habilita el "pull up" del puerto
  25:../keyboard.c **** 	rPUPG = 0x0;
 1988              		.loc 1 25 0
 1989 0020 70309FE5 		ldr	r3, .L2+4
 1990 0024 0020A0E3 		mov	r2, #0
 1991 0028 002083E5 		str	r2, [r3, #0]
  26:../keyboard.c **** 		// Configura las lineas de int. como de flanco de bajada mediante EXTINT
  27:../keyboard.c **** 	rEXTINT = 0x22222222;
 1992              		.loc 1 27 0
 1993 002c 68309FE5 		ldr	r3, .L2+8
 1994 0030 68209FE5 		ldr	r2, .L2+12
 1995 0034 002083E5 		str	r2, [r3, #0]
  28:../keyboard.c **** 	/* Establece la rutina de servicio para EINT1 */
  29:../keyboard.c **** 	pISR_EINT1 = (unsigned)KeyboardInt;
 1996              		.loc 1 29 0
 1997 0038 64309FE5 		ldr	r3, .L2+16
 1998 003c 64209FE5 		ldr	r2, .L2+20
 1999 0040 002083E5 		str	r2, [r3, #0]
  30:../keyboard.c **** 	/* Configurar controlador de interrupciones */
  31:../keyboard.c **** 		// Borra INTPND escribiendo 1s en I_ISPC
  32:../keyboard.c **** 	rI_ISPC = 0x3ffffff;
 2000              		.loc 1 32 0
 2001 0044 60309FE5 		ldr	r3, .L2+24
 2002 0048 3F23E0E3 		mvn	r2, #-67108864
 2003 004c 002083E5 		str	r2, [r3, #0]
  33:../keyboard.c **** 		// Configura las lineas como de tipo IRQ mediante INTMOD
  34:../keyboard.c **** 	rINTMOD = 0x0;
 2004              		.loc 1 34 0
 2005 0050 58309FE5 		ldr	r3, .L2+28
 2006 0054 0020A0E3 		mov	r2, #0
 2007 0058 002083E5 		str	r2, [r3, #0]
  35:../keyboard.c **** 		// Habilita int. vectorizadas y la linea IRQ (FIQ no) mediante INTCON
  36:../keyboard.c **** 	rINTCON = 0x1;
 2008              		.loc 1 36 0
 2009 005c 1E36A0E3 		mov	r3, #31457280
 2010 0060 0120A0E3 		mov	r2, #1
 2011 0064 002083E5 		str	r2, [r3, #0]
  37:../keyboard.c **** 	/* Habilitar linea EINT1 */
  38:../keyboard.c **** 	rINTMSK = rINTMSK & ~(BIT_EINT1 | BIT_GLOBAL);
 2012              		.loc 1 38 0
 2013 0068 44309FE5 		ldr	r3, .L2+32
 2014 006c 40209FE5 		ldr	r2, .L2+32
 2015 0070 002092E5 		ldr	r2, [r2, #0]
 2016 0074 0524C2E3 		bic	r2, r2, #83886080
 2017 0078 002083E5 		str	r2, [r3, #0]
  39:../keyboard.c **** 	/* Por precaucion, se vuelven a borrar los bits de INTPND correspondientes*/
  40:../keyboard.c **** 	rI_ISPC = 0x3ffffff;
 2018              		.loc 1 40 0
 2019 007c 28309FE5 		ldr	r3, .L2+24
 2020 0080 3F23E0E3 		mvn	r2, #-67108864
 2021 0084 002083E5 		str	r2, [r3, #0]
  41:../keyboard.c **** }
 2022              		.loc 1 41 0
 2023 0088 0CD04BE2 		sub	sp, fp, #12
 2024 008c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2025 0090 1EFF2FE1 		bx	lr
 2026              	.L3:
 2027              		.align	2
 2028              	.L2:
 2029 0094 4000D201 		.word	30539840
 2030 0098 4800D201 		.word	30539848
 2031 009c 5000D201 		.word	30539856
 2032 00a0 22222222 		.word	572662306
 2033 00a4 80FF7F0C 		.word	209715072
 2034 00a8 00000000 		.word	KeyboardInt
 2035 00ac 2400E001 		.word	31457316
 2036 00b0 0800E001 		.word	31457288
 2037 00b4 0C00E001 		.word	31457292
 2038              		.cfi_endproc
 2039              	.LFE0:
 2041              		.align	2
 2042              		.global	KeyboardInt
 2044              	KeyboardInt:
 2045              	.LFB1:
  42:../keyboard.c **** void KeyboardInt(void)
  43:../keyboard.c **** {
 2046              		.loc 1 43 0
 2047              		.cfi_startproc
 2048              		@ Interrupt Service Routine.
 2049              		@ args = 0, pretend = 0, frame = 0
 2050              		@ frame_needed = 1, uses_anonymous_args = 0
 2051 00b8 04C02DE5 		str	ip, [sp, #-4]!
 2052 00bc 0DC0A0E1 		mov	ip, sp
 2053              	.LCFI2:
 2054              		.cfi_def_cfa_register 12
 2055 00c0 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 2056 00c4 04B04CE2 		sub	fp, ip, #4
 2057              		.cfi_offset 14, -8
 2058              		.cfi_offset 13, -12
 2059              		.cfi_offset 11, -16
 2060              		.cfi_offset 3, -20
 2061              		.cfi_offset 2, -24
 2062              		.cfi_offset 1, -28
 2063              		.cfi_offset 0, -32
 2064              	.LCFI3:
 2065              		.cfi_def_cfa 11, 4
  44:../keyboard.c **** 	/* Esperar trp mediante la funcion DelayMs()*/
  45:../keyboard.c **** 	DelayMs(20);
 2066              		.loc 1 45 0
 2067 00c8 1400A0E3 		mov	r0, #20
 2068 00cc FEFFFFEB 		bl	DelayMs
  46:../keyboard.c **** 	/* Identificar la tecla */
  47:../keyboard.c **** 	key = -1;
 2069              		.loc 1 47 0
 2070 00d0 50309FE5 		ldr	r3, .L6
 2071 00d4 0020E0E3 		mvn	r2, #0
 2072 00d8 002083E5 		str	r2, [r3, #0]
  48:../keyboard.c **** 	key = key_read();
 2073              		.loc 1 48 0
 2074 00dc FEFFFFEB 		bl	key_read
 2075 00e0 0020A0E1 		mov	r2, r0
 2076 00e4 3C309FE5 		ldr	r3, .L6
 2077 00e8 002083E5 		str	r2, [r3, #0]
  49:../keyboard.c **** 	/* Esperar a se libere la tecla: consultar bit 1 del registro de datos del puerto G */
  50:../keyboard.c **** 	while ((rPDATG & 0x1) == 0);
 2078              		.loc 1 50 0
 2079 00ec 0000A0E1 		mov	r0, r0	@ nop
 2080              	.L5:
 2081              		.loc 1 50 0 is_stmt 0 discriminator 1
 2082 00f0 34309FE5 		ldr	r3, .L6+4
 2083 00f4 003093E5 		ldr	r3, [r3, #0]
 2084 00f8 013003E2 		and	r3, r3, #1
 2085 00fc 000053E3 		cmp	r3, #0
 2086 0100 FAFFFF0A 		beq	.L5
  51:../keyboard.c **** 	/* Esperar trd mediante la funcion Delay() */
  52:../keyboard.c **** 	DelayMs(100);
 2087              		.loc 1 52 0 is_stmt 1
 2088 0104 6400A0E3 		mov	r0, #100
 2089 0108 FEFFFFEB 		bl	DelayMs
  53:../keyboard.c **** 	/* Borrar interrupción de teclado */
  54:../keyboard.c **** 	rI_ISPC = BIT_EINT1;
 2090              		.loc 1 54 0
 2091 010c 1C309FE5 		ldr	r3, .L6+8
 2092 0110 0124A0E3 		mov	r2, #16777216
 2093 0114 002083E5 		str	r2, [r3, #0]
  55:../keyboard.c **** }
 2094              		.loc 1 55 0
 2095 0118 1CD04BE2 		sub	sp, fp, #28
 2096 011c 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2097 0120 04C09DE4 		ldmfd	sp!, {ip}
 2098 0124 04F05EE2 		subs	pc, lr, #4
 2099              	.L7:
 2100              		.align	2
 2101              	.L6:
 2102 0128 00000000 		.word	key
 2103 012c 4400D201 		.word	30539844
 2104 0130 2400E001 		.word	31457316
 2105              		.cfi_endproc
 2106              	.LFE1:
 2108              		.align	2
 2109              		.global	key_read
 2111              	key_read:
 2112              	.LFB2:
  56:../keyboard.c **** 
  57:../keyboard.c **** int key_read()
  58:../keyboard.c **** {
 2113              		.loc 1 58 0
 2114              		.cfi_startproc
 2115              		@ Function supports interworking.
 2116              		@ args = 0, pretend = 0, frame = 8
 2117              		@ frame_needed = 1, uses_anonymous_args = 0
 2118 0134 0DC0A0E1 		mov	ip, sp
 2119              	.LCFI4:
 2120              		.cfi_def_cfa_register 12
 2121 0138 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2122 013c 04B04CE2 		sub	fp, ip, #4
 2123              		.cfi_offset 14, -8
 2124              		.cfi_offset 13, -12
 2125              		.cfi_offset 11, -16
 2126              	.LCFI5:
 2127              		.cfi_def_cfa 11, 4
 2128 0140 08D04DE2 		sub	sp, sp, #8
  59:../keyboard.c **** 	int value = -1;
 2129              		.loc 1 59 0
 2130 0144 0030E0E3 		mvn	r3, #0
 2131 0148 10300BE5 		str	r3, [fp, #-16]
  60:../keyboard.c **** 	char temp;
  61:../keyboard.c **** 	// Identificar la tecla mediante ''scanning''
  62:../keyboard.c **** 	// Si la identificación falla la función debe devolver -1
  63:../keyboard.c **** 	temp = *(keyboard_base + 0xfd) & KEY_VALUE_MASK; //Usamos KEY_VALUE_MASK para quedarnos con los 4 
 2132              		.loc 1 63 0
 2133 014c 0C329FE5 		ldr	r3, .L33
 2134 0150 003093E5 		ldr	r3, [r3, #0]
 2135 0154 FD3083E2 		add	r3, r3, #253
 2136 0158 0030D3E5 		ldrb	r3, [r3, #0]
 2137 015c FF3003E2 		and	r3, r3, #255
 2138 0160 0F3003E2 		and	r3, r3, #15
 2139 0164 11304BE5 		strb	r3, [fp, #-17]
  64:../keyboard.c **** 
  65:../keyboard.c **** 	switch (temp) {
 2140              		.loc 1 65 0
 2141 0168 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2142 016c 073043E2 		sub	r3, r3, #7
 2143 0170 070053E3 		cmp	r3, #7
 2144 0174 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 2145 0178 130000EA 		b	.L9
 2146              	.L14:
 2147 017c 9C010000 		.word	.L10
 2148 0180 CC010000 		.word	.L9
 2149 0184 CC010000 		.word	.L9
 2150 0188 CC010000 		.word	.L9
 2151 018c A8010000 		.word	.L11
 2152 0190 CC010000 		.word	.L9
 2153 0194 B4010000 		.word	.L12
 2154 0198 C0010000 		.word	.L13
 2155              	.L10:
  66:../keyboard.c **** 		case 0x7:  value = 0; break;
 2156              		.loc 1 66 0
 2157 019c 0030A0E3 		mov	r3, #0
 2158 01a0 10300BE5 		str	r3, [fp, #-16]
 2159 01a4 080000EA 		b	.L9
 2160              	.L11:
  67:../keyboard.c **** 		case 0xB:  value = 1; break;
 2161              		.loc 1 67 0
 2162 01a8 0130A0E3 		mov	r3, #1
 2163 01ac 10300BE5 		str	r3, [fp, #-16]
 2164 01b0 050000EA 		b	.L9
 2165              	.L12:
  68:../keyboard.c **** 		case 0xD:  value = 2; break;
 2166              		.loc 1 68 0
 2167 01b4 0230A0E3 		mov	r3, #2
 2168 01b8 10300BE5 		str	r3, [fp, #-16]
 2169 01bc 020000EA 		b	.L9
 2170              	.L13:
  69:../keyboard.c **** 		case 0xE:  value = 3; break;
 2171              		.loc 1 69 0
 2172 01c0 0330A0E3 		mov	r3, #3
 2173 01c4 10300BE5 		str	r3, [fp, #-16]
 2174 01c8 0000A0E1 		mov	r0, r0	@ nop
 2175              	.L9:
  70:../keyboard.c **** 	}
  71:../keyboard.c **** 	
  72:../keyboard.c **** 	/*
  73:../keyboard.c **** 	* ESCRIBIR EL CÓDIGO CORRESPONDIENTE A LAS OTRAS FILAS Y COLUMNAS
  74:../keyboard.c **** 	*/
  75:../keyboard.c **** 	temp = *(keyboard_base + 0xfb) & KEY_VALUE_MASK; //Usamos KEY_VALUE_MASK para quedarnos con los 4 
 2176              		.loc 1 75 0
 2177 01cc 8C319FE5 		ldr	r3, .L33
 2178 01d0 003093E5 		ldr	r3, [r3, #0]
 2179 01d4 FB3083E2 		add	r3, r3, #251
 2180 01d8 0030D3E5 		ldrb	r3, [r3, #0]
 2181 01dc FF3003E2 		and	r3, r3, #255
 2182 01e0 0F3003E2 		and	r3, r3, #15
 2183 01e4 11304BE5 		strb	r3, [fp, #-17]
  76:../keyboard.c **** 
  77:../keyboard.c **** 	switch (temp) {
 2184              		.loc 1 77 0
 2185 01e8 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2186 01ec 073043E2 		sub	r3, r3, #7
 2187 01f0 070053E3 		cmp	r3, #7
 2188 01f4 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 2189 01f8 130000EA 		b	.L15
 2190              	.L20:
 2191 01fc 1C020000 		.word	.L16
 2192 0200 4C020000 		.word	.L15
 2193 0204 4C020000 		.word	.L15
 2194 0208 4C020000 		.word	.L15
 2195 020c 28020000 		.word	.L17
 2196 0210 4C020000 		.word	.L15
 2197 0214 34020000 		.word	.L18
 2198 0218 40020000 		.word	.L19
 2199              	.L16:
  78:../keyboard.c **** 		case 0x7:  value = 4; break;
 2200              		.loc 1 78 0
 2201 021c 0430A0E3 		mov	r3, #4
 2202 0220 10300BE5 		str	r3, [fp, #-16]
 2203 0224 080000EA 		b	.L15
 2204              	.L17:
  79:../keyboard.c **** 		case 0xB:  value = 5; break;
 2205              		.loc 1 79 0
 2206 0228 0530A0E3 		mov	r3, #5
 2207 022c 10300BE5 		str	r3, [fp, #-16]
 2208 0230 050000EA 		b	.L15
 2209              	.L18:
  80:../keyboard.c **** 		case 0xD:  value = 6; break;
 2210              		.loc 1 80 0
 2211 0234 0630A0E3 		mov	r3, #6
 2212 0238 10300BE5 		str	r3, [fp, #-16]
 2213 023c 020000EA 		b	.L15
 2214              	.L19:
  81:../keyboard.c **** 		case 0xE:  value = 7; break;
 2215              		.loc 1 81 0
 2216 0240 0730A0E3 		mov	r3, #7
 2217 0244 10300BE5 		str	r3, [fp, #-16]
 2218 0248 0000A0E1 		mov	r0, r0	@ nop
 2219              	.L15:
  82:../keyboard.c **** 	}
  83:../keyboard.c **** 
  84:../keyboard.c **** 	temp = *(keyboard_base + 0xf7) & KEY_VALUE_MASK; //Usamos KEY_VALUE_MASK para quedarnos con los 4 
 2220              		.loc 1 84 0
 2221 024c 0C319FE5 		ldr	r3, .L33
 2222 0250 003093E5 		ldr	r3, [r3, #0]
 2223 0254 F73083E2 		add	r3, r3, #247
 2224 0258 0030D3E5 		ldrb	r3, [r3, #0]
 2225 025c FF3003E2 		and	r3, r3, #255
 2226 0260 0F3003E2 		and	r3, r3, #15
 2227 0264 11304BE5 		strb	r3, [fp, #-17]
  85:../keyboard.c **** 
  86:../keyboard.c **** 	switch (temp) {
 2228              		.loc 1 86 0
 2229 0268 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2230 026c 073043E2 		sub	r3, r3, #7
 2231 0270 070053E3 		cmp	r3, #7
 2232 0274 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 2233 0278 130000EA 		b	.L21
 2234              	.L26:
 2235 027c 9C020000 		.word	.L22
 2236 0280 CC020000 		.word	.L21
 2237 0284 CC020000 		.word	.L21
 2238 0288 CC020000 		.word	.L21
 2239 028c A8020000 		.word	.L23
 2240 0290 CC020000 		.word	.L21
 2241 0294 B4020000 		.word	.L24
 2242 0298 C0020000 		.word	.L25
 2243              	.L22:
  87:../keyboard.c **** 		case 0x7:  value = 8; break;
 2244              		.loc 1 87 0
 2245 029c 0830A0E3 		mov	r3, #8
 2246 02a0 10300BE5 		str	r3, [fp, #-16]
 2247 02a4 080000EA 		b	.L21
 2248              	.L23:
  88:../keyboard.c **** 		case 0xB:  value = 9; break;
 2249              		.loc 1 88 0
 2250 02a8 0930A0E3 		mov	r3, #9
 2251 02ac 10300BE5 		str	r3, [fp, #-16]
 2252 02b0 050000EA 		b	.L21
 2253              	.L24:
  89:../keyboard.c **** 		case 0xD:  value = 10; break;
 2254              		.loc 1 89 0
 2255 02b4 0A30A0E3 		mov	r3, #10
 2256 02b8 10300BE5 		str	r3, [fp, #-16]
 2257 02bc 020000EA 		b	.L21
 2258              	.L25:
  90:../keyboard.c **** 		case 0xE:  value = 11; break;
 2259              		.loc 1 90 0
 2260 02c0 0B30A0E3 		mov	r3, #11
 2261 02c4 10300BE5 		str	r3, [fp, #-16]
 2262 02c8 0000A0E1 		mov	r0, r0	@ nop
 2263              	.L21:
  91:../keyboard.c **** 	}
  92:../keyboard.c **** 
  93:../keyboard.c **** 	temp = *(keyboard_base + 0xef) & KEY_VALUE_MASK; //Usamos KEY_VALUE_MASK para quedarnos con los 4 
 2264              		.loc 1 93 0
 2265 02cc 8C309FE5 		ldr	r3, .L33
 2266 02d0 003093E5 		ldr	r3, [r3, #0]
 2267 02d4 EF3083E2 		add	r3, r3, #239
 2268 02d8 0030D3E5 		ldrb	r3, [r3, #0]
 2269 02dc FF3003E2 		and	r3, r3, #255
 2270 02e0 0F3003E2 		and	r3, r3, #15
 2271 02e4 11304BE5 		strb	r3, [fp, #-17]
  94:../keyboard.c **** 
  95:../keyboard.c **** 	switch (temp) {
 2272              		.loc 1 95 0
 2273 02e8 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2274 02ec 073043E2 		sub	r3, r3, #7
 2275 02f0 070053E3 		cmp	r3, #7
 2276 02f4 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 2277 02f8 130000EA 		b	.L27
 2278              	.L32:
 2279 02fc 1C030000 		.word	.L28
 2280 0300 4C030000 		.word	.L27
 2281 0304 4C030000 		.word	.L27
 2282 0308 4C030000 		.word	.L27
 2283 030c 28030000 		.word	.L29
 2284 0310 4C030000 		.word	.L27
 2285 0314 34030000 		.word	.L30
 2286 0318 40030000 		.word	.L31
 2287              	.L28:
  96:../keyboard.c **** 		case 0x7:  value = 12; break;
 2288              		.loc 1 96 0
 2289 031c 0C30A0E3 		mov	r3, #12
 2290 0320 10300BE5 		str	r3, [fp, #-16]
 2291 0324 080000EA 		b	.L27
 2292              	.L29:
  97:../keyboard.c **** 		case 0xB:  value = 13; break;
 2293              		.loc 1 97 0
 2294 0328 0D30A0E3 		mov	r3, #13
 2295 032c 10300BE5 		str	r3, [fp, #-16]
 2296 0330 050000EA 		b	.L27
 2297              	.L30:
  98:../keyboard.c **** 		case 0xD:  value = 14; break;
 2298              		.loc 1 98 0
 2299 0334 0E30A0E3 		mov	r3, #14
 2300 0338 10300BE5 		str	r3, [fp, #-16]
 2301 033c 020000EA 		b	.L27
 2302              	.L31:
  99:../keyboard.c **** 		case 0xE:  value = 15; break;
 2303              		.loc 1 99 0
 2304 0340 0F30A0E3 		mov	r3, #15
 2305 0344 10300BE5 		str	r3, [fp, #-16]
 2306 0348 0000A0E1 		mov	r0, r0	@ nop
 2307              	.L27:
 100:../keyboard.c **** 	}
 101:../keyboard.c **** 
 102:../keyboard.c **** 	return value;
 2308              		.loc 1 102 0
 2309 034c 10301BE5 		ldr	r3, [fp, #-16]
 103:../keyboard.c **** 
 104:../keyboard.c **** }
 2310              		.loc 1 104 0
 2311 0350 0300A0E1 		mov	r0, r3
 2312 0354 0CD04BE2 		sub	sp, fp, #12
 2313 0358 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2314 035c 1EFF2FE1 		bx	lr
 2315              	.L34:
 2316              		.align	2
 2317              	.L33:
 2318 0360 00000000 		.word	keyboard_base
 2319              		.cfi_endproc
 2320              	.LFE2:
 2322              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 keyboard.c
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:1958   .data:00000000 keyboard_base
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:1955   .data:00000000 $d
                            *COM*:00000004 key
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:1962   .text:00000000 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:1965   .text:00000000 keyboard_init
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:2029   .text:00000094 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:2044   .text:000000b8 KeyboardInt
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:2041   .text:000000b8 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:2111   .text:00000134 key_read
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:2102   .text:00000128 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:2108   .text:00000134 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:2147   .text:0000017c $d
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:2157   .text:0000019c $a
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:2191   .text:000001fc $d
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:2201   .text:0000021c $a
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:2235   .text:0000027c $d
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:2245   .text:0000029c $a
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:2279   .text:000002fc $d
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:2289   .text:0000031c $a
C:\Users\USUARI~1\AppData\Local\Temp\ccsyr0Pd.s:2318   .text:00000360 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
DelayMs
