   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"timer.c"
  21              	.Ltext0:
  22              		.file 1 "../timer.c"
 2551              		.align	2
 2552              		.global	shuffle
 2554              	shuffle:
 2555              	.LFB0:
   1:../timer.c    **** /*--- ficheros de cabecera ---*/
   2:../timer.c    **** #include "44b.h"
   3:../timer.c    **** #include "44blib.h"
   4:../timer.c    **** #include <stdlib.h>
   5:../timer.c    **** 
   6:../timer.c    **** /* Variables globales */
   7:../timer.c    **** int cont;
   8:../timer.c    **** int numbers[4];
   9:../timer.c    **** /*--- funciones externas ---*/
  10:../timer.c    **** extern void D8Led_symbol(int value);
  11:../timer.c    **** extern void D8Led_symbol_correct(int value);
  12:../timer.c    **** extern int row;
  13:../timer.c    **** extern int key;
  14:../timer.c    **** extern void leds_switch(void);
  15:../timer.c    **** /*--- declaracion de funciones ---*/
  16:../timer.c    **** void timers_init(void);
  17:../timer.c    **** void timer0_ISR(void) __attribute__ ((interrupt ("IRQ")));
  18:../timer.c    **** void timer2_ISR(void) __attribute__ ((interrupt ("IRQ")));
  19:../timer.c    **** void timer4_ISR(void) __attribute__ ((interrupt ("IRQ")));
  20:../timer.c    **** void shuffle(int *array, int n);
  21:../timer.c    **** void random_number_generator(void);
  22:../timer.c    **** /*--- codigo de las funciones ---*/
  23:../timer.c    **** 
  24:../timer.c    **** void shuffle(int *array, int n)
  25:../timer.c    **** {
 2556              		.loc 1 25 0
 2557              		.cfi_startproc
 2558              		@ Function supports interworking.
 2559              		@ args = 0, pretend = 0, frame = 24
 2560              		@ frame_needed = 1, uses_anonymous_args = 0
 2561 0000 0DC0A0E1 		mov	ip, sp
 2562              	.LCFI0:
 2563              		.cfi_def_cfa_register 12
 2564 0004 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 2565 0008 04B04CE2 		sub	fp, ip, #4
 2566              		.cfi_offset 14, -8
 2567              		.cfi_offset 13, -12
 2568              		.cfi_offset 11, -16
 2569              		.cfi_offset 4, -20
 2570              	.LCFI1:
 2571              		.cfi_def_cfa 11, 4
 2572 000c 1CD04DE2 		sub	sp, sp, #28
 2573 0010 28000BE5 		str	r0, [fp, #-40]
 2574 0014 2C100BE5 		str	r1, [fp, #-44]
  26:../timer.c    ****     if (n > 1)
 2575              		.loc 1 26 0
 2576 0018 2C301BE5 		ldr	r3, [fp, #-44]
 2577 001c 010053E3 		cmp	r3, #1
 2578 0020 340000DA 		ble	.L1
 2579              	.LBB2:
  27:../timer.c    ****     {
  28:../timer.c    ****         size_t i;
  29:../timer.c    ****         for (i = 0; i < n - 1; i++)
 2580              		.loc 1 29 0
 2581 0024 0030A0E3 		mov	r3, #0
 2582 0028 18300BE5 		str	r3, [fp, #-24]
 2583 002c 2B0000EA 		b	.L3
 2584              	.L4:
 2585              	.LBB3:
  30:../timer.c    ****         {
  31:../timer.c    ****           size_t j = i + rand() / (RAND_MAX / (n - i) + 1);
 2586              		.loc 1 31 0 discriminator 2
 2587 0030 FEFFFFEB 		bl	rand
 2588 0034 0030A0E1 		mov	r3, r0
 2589 0038 0340A0E1 		mov	r4, r3
 2590 003c 2C201BE5 		ldr	r2, [fp, #-44]
 2591 0040 18301BE5 		ldr	r3, [fp, #-24]
 2592 0044 023063E0 		rsb	r3, r3, r2
 2593 0048 0201E0E3 		mvn	r0, #-2147483648
 2594 004c 0310A0E1 		mov	r1, r3
 2595 0050 FEFFFFEB 		bl	__aeabi_uidiv
 2596 0054 0030A0E1 		mov	r3, r0
 2597 0058 013083E2 		add	r3, r3, #1
 2598 005c 0400A0E1 		mov	r0, r4
 2599 0060 0310A0E1 		mov	r1, r3
 2600 0064 FEFFFFEB 		bl	__aeabi_uidiv
 2601 0068 0030A0E1 		mov	r3, r0
 2602 006c 0320A0E1 		mov	r2, r3
 2603 0070 18301BE5 		ldr	r3, [fp, #-24]
 2604 0074 033082E0 		add	r3, r2, r3
 2605 0078 1C300BE5 		str	r3, [fp, #-28]
  32:../timer.c    ****           int t = array[j];
 2606              		.loc 1 32 0 discriminator 2
 2607 007c 1C301BE5 		ldr	r3, [fp, #-28]
 2608 0080 0331A0E1 		mov	r3, r3, asl #2
 2609 0084 28201BE5 		ldr	r2, [fp, #-40]
 2610 0088 033082E0 		add	r3, r2, r3
 2611 008c 003093E5 		ldr	r3, [r3, #0]
 2612 0090 20300BE5 		str	r3, [fp, #-32]
  33:../timer.c    ****           array[j] = array[i];
 2613              		.loc 1 33 0 discriminator 2
 2614 0094 1C301BE5 		ldr	r3, [fp, #-28]
 2615 0098 0331A0E1 		mov	r3, r3, asl #2
 2616 009c 28201BE5 		ldr	r2, [fp, #-40]
 2617 00a0 033082E0 		add	r3, r2, r3
 2618 00a4 18201BE5 		ldr	r2, [fp, #-24]
 2619 00a8 0221A0E1 		mov	r2, r2, asl #2
 2620 00ac 28101BE5 		ldr	r1, [fp, #-40]
 2621 00b0 022081E0 		add	r2, r1, r2
 2622 00b4 002092E5 		ldr	r2, [r2, #0]
 2623 00b8 002083E5 		str	r2, [r3, #0]
  34:../timer.c    ****           array[i] = t;
 2624              		.loc 1 34 0 discriminator 2
 2625 00bc 18301BE5 		ldr	r3, [fp, #-24]
 2626 00c0 0331A0E1 		mov	r3, r3, asl #2
 2627 00c4 28201BE5 		ldr	r2, [fp, #-40]
 2628 00c8 033082E0 		add	r3, r2, r3
 2629 00cc 20201BE5 		ldr	r2, [fp, #-32]
 2630 00d0 002083E5 		str	r2, [r3, #0]
 2631              	.LBE3:
  29:../timer.c    ****         for (i = 0; i < n - 1; i++)
 2632              		.loc 1 29 0 discriminator 2
 2633 00d4 18301BE5 		ldr	r3, [fp, #-24]
 2634 00d8 013083E2 		add	r3, r3, #1
 2635 00dc 18300BE5 		str	r3, [fp, #-24]
 2636              	.L3:
  29:../timer.c    ****         for (i = 0; i < n - 1; i++)
 2637              		.loc 1 29 0 is_stmt 0 discriminator 1
 2638 00e0 2C301BE5 		ldr	r3, [fp, #-44]
 2639 00e4 013043E2 		sub	r3, r3, #1
 2640 00e8 0320A0E1 		mov	r2, r3
 2641 00ec 18301BE5 		ldr	r3, [fp, #-24]
 2642 00f0 030052E1 		cmp	r2, r3
 2643 00f4 CDFFFF8A 		bhi	.L4
 2644              	.L1:
 2645              	.LBE2:
  35:../timer.c    ****         }
  36:../timer.c    ****     }
  37:../timer.c    **** }
 2646              		.loc 1 37 0 is_stmt 1
 2647 00f8 10D04BE2 		sub	sp, fp, #16
 2648 00fc 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 2649 0100 1EFF2FE1 		bx	lr
 2650              		.cfi_endproc
 2651              	.LFE0:
 2653              		.align	2
 2654              		.global	random_number_generator
 2656              	random_number_generator:
 2657              	.LFB1:
  38:../timer.c    **** 
  39:../timer.c    **** void random_number_generator(void)
  40:../timer.c    **** {
 2658              		.loc 1 40 0
 2659              		.cfi_startproc
 2660              		@ Function supports interworking.
 2661              		@ args = 0, pretend = 0, frame = 16
 2662              		@ frame_needed = 1, uses_anonymous_args = 0
 2663 0104 0DC0A0E1 		mov	ip, sp
 2664              	.LCFI2:
 2665              		.cfi_def_cfa_register 12
 2666 0108 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2667 010c 04B04CE2 		sub	fp, ip, #4
 2668              		.cfi_offset 14, -8
 2669              		.cfi_offset 13, -12
 2670              		.cfi_offset 11, -16
 2671              	.LCFI3:
 2672              		.cfi_def_cfa 11, 4
 2673 0110 10D04DE2 		sub	sp, sp, #16
  41:../timer.c    **** 	int i;
  42:../timer.c    **** 	if (row) {
 2674              		.loc 1 42 0
 2675 0114 E4309FE5 		ldr	r3, .L12
 2676 0118 003093E5 		ldr	r3, [r3, #0]
 2677 011c 000053E3 		cmp	r3, #0
 2678 0120 1800000A 		beq	.L6
 2679              	.LBB4:
  43:../timer.c    **** 		int num_row = rand() % 4;
 2680              		.loc 1 43 0
 2681 0124 FEFFFFEB 		bl	rand
 2682 0128 0020A0E1 		mov	r2, r0
 2683 012c C23FA0E1 		mov	r3, r2, asr #31
 2684 0130 233FA0E1 		mov	r3, r3, lsr #30
 2685 0134 032082E0 		add	r2, r2, r3
 2686 0138 032002E2 		and	r2, r2, #3
 2687 013c 023063E0 		rsb	r3, r3, r2
 2688 0140 14300BE5 		str	r3, [fp, #-20]
  44:../timer.c    **** 		for (i = 0; i < 4; i++)
 2689              		.loc 1 44 0
 2690 0144 0030A0E3 		mov	r3, #0
 2691 0148 10300BE5 		str	r3, [fp, #-16]
 2692 014c 090000EA 		b	.L7
 2693              	.L8:
  45:../timer.c    **** 			numbers[i] = i + 4 * num_row;
 2694              		.loc 1 45 0 discriminator 2
 2695 0150 14301BE5 		ldr	r3, [fp, #-20]
 2696 0154 0321A0E1 		mov	r2, r3, asl #2
 2697 0158 10301BE5 		ldr	r3, [fp, #-16]
 2698 015c 031082E0 		add	r1, r2, r3
 2699 0160 9C309FE5 		ldr	r3, .L12+4
 2700 0164 10201BE5 		ldr	r2, [fp, #-16]
 2701 0168 021183E7 		str	r1, [r3, r2, asl #2]
  44:../timer.c    **** 		for (i = 0; i < 4; i++)
 2702              		.loc 1 44 0 discriminator 2
 2703 016c 10301BE5 		ldr	r3, [fp, #-16]
 2704 0170 013083E2 		add	r3, r3, #1
 2705 0174 10300BE5 		str	r3, [fp, #-16]
 2706              	.L7:
  44:../timer.c    **** 		for (i = 0; i < 4; i++)
 2707              		.loc 1 44 0 is_stmt 0 discriminator 1
 2708 0178 10301BE5 		ldr	r3, [fp, #-16]
 2709 017c 030053E3 		cmp	r3, #3
 2710 0180 F2FFFFDA 		ble	.L8
  44:../timer.c    **** 		for (i = 0; i < 4; i++)
 2711              		.loc 1 44 0
 2712 0184 170000EA 		b	.L9
 2713              	.L6:
 2714              	.LBE4:
 2715              	.LBB5:
  46:../timer.c    **** 	}
  47:../timer.c    **** 	else {
  48:../timer.c    **** 		int num_col = rand() % 4;
 2716              		.loc 1 48 0 is_stmt 1
 2717 0188 FEFFFFEB 		bl	rand
 2718 018c 0020A0E1 		mov	r2, r0
 2719 0190 C23FA0E1 		mov	r3, r2, asr #31
 2720 0194 233FA0E1 		mov	r3, r3, lsr #30
 2721 0198 032082E0 		add	r2, r2, r3
 2722 019c 032002E2 		and	r2, r2, #3
 2723 01a0 023063E0 		rsb	r3, r3, r2
 2724 01a4 18300BE5 		str	r3, [fp, #-24]
  49:../timer.c    **** 		for (i = 0; i < 4; i++)
 2725              		.loc 1 49 0
 2726 01a8 0030A0E3 		mov	r3, #0
 2727 01ac 10300BE5 		str	r3, [fp, #-16]
 2728 01b0 090000EA 		b	.L10
 2729              	.L11:
  50:../timer.c    **** 			numbers[i] = 4 * i + num_col;
 2730              		.loc 1 50 0 discriminator 2
 2731 01b4 10301BE5 		ldr	r3, [fp, #-16]
 2732 01b8 0321A0E1 		mov	r2, r3, asl #2
 2733 01bc 18301BE5 		ldr	r3, [fp, #-24]
 2734 01c0 031082E0 		add	r1, r2, r3
 2735 01c4 38309FE5 		ldr	r3, .L12+4
 2736 01c8 10201BE5 		ldr	r2, [fp, #-16]
 2737 01cc 021183E7 		str	r1, [r3, r2, asl #2]
  49:../timer.c    **** 		for (i = 0; i < 4; i++)
 2738              		.loc 1 49 0 discriminator 2
 2739 01d0 10301BE5 		ldr	r3, [fp, #-16]
 2740 01d4 013083E2 		add	r3, r3, #1
 2741 01d8 10300BE5 		str	r3, [fp, #-16]
 2742              	.L10:
  49:../timer.c    **** 		for (i = 0; i < 4; i++)
 2743              		.loc 1 49 0 is_stmt 0 discriminator 1
 2744 01dc 10301BE5 		ldr	r3, [fp, #-16]
 2745 01e0 030053E3 		cmp	r3, #3
 2746 01e4 F2FFFFDA 		ble	.L11
 2747              	.L9:
 2748              	.LBE5:
  51:../timer.c    **** 	}
  52:../timer.c    **** 	shuffle(numbers, 4);
 2749              		.loc 1 52 0 is_stmt 1
 2750 01e8 14009FE5 		ldr	r0, .L12+4
 2751 01ec 0410A0E3 		mov	r1, #4
 2752 01f0 FEFFFFEB 		bl	shuffle
  53:../timer.c    **** }
 2753              		.loc 1 53 0
 2754 01f4 0CD04BE2 		sub	sp, fp, #12
 2755 01f8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2756 01fc 1EFF2FE1 		bx	lr
 2757              	.L13:
 2758              		.align	2
 2759              	.L12:
 2760 0200 00000000 		.word	row
 2761 0204 00000000 		.word	numbers
 2762              		.cfi_endproc
 2763              	.LFE1:
 2765              		.align	2
 2766              		.global	timers_init
 2768              	timers_init:
 2769              	.LFB2:
  54:../timer.c    **** 
  55:../timer.c    **** void timers_init(void)
  56:../timer.c    **** {
 2770              		.loc 1 56 0
 2771              		.cfi_startproc
 2772              		@ Function supports interworking.
 2773              		@ args = 0, pretend = 0, frame = 0
 2774              		@ frame_needed = 1, uses_anonymous_args = 0
 2775 0208 0DC0A0E1 		mov	ip, sp
 2776              	.LCFI4:
 2777              		.cfi_def_cfa_register 12
 2778 020c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2779 0210 04B04CE2 		sub	fp, ip, #4
 2780              		.cfi_offset 14, -8
 2781              		.cfi_offset 13, -12
 2782              		.cfi_offset 11, -16
 2783              	.LCFI5:
 2784              		.cfi_def_cfa 11, 4
  57:../timer.c    **** 	random_number_generator();
 2785              		.loc 1 57 0
 2786 0214 FEFFFFEB 		bl	random_number_generator
  58:../timer.c    **** 	cont = 3;
 2787              		.loc 1 58 0
 2788 0218 CC319FE5 		ldr	r3, .L15
 2789 021c 0320A0E3 		mov	r2, #3
 2790 0220 002083E5 		str	r2, [r3, #0]
  59:../timer.c    **** 	rINTMOD = 0x0; //enable IRQ
 2791              		.loc 1 59 0
 2792 0224 C4319FE5 		ldr	r3, .L15+4
 2793 0228 0020A0E3 		mov	r2, #0
 2794 022c 002083E5 		str	r2, [r3, #0]
  60:../timer.c    **** 	rINTCON = 0x1; //enable IRQ pin and vect.
 2795              		.loc 1 60 0
 2796 0230 1E36A0E3 		mov	r3, #31457280
 2797 0234 0120A0E3 		mov	r2, #1
 2798 0238 002083E5 		str	r2, [r3, #0]
  61:../timer.c    **** 	pISR_TIMER0=(unsigned)timer0_ISR;
 2799              		.loc 1 61 0
 2800 023c B0319FE5 		ldr	r3, .L15+8
 2801 0240 B0219FE5 		ldr	r2, .L15+12
 2802 0244 002083E5 		str	r2, [r3, #0]
  62:../timer.c    **** 	pISR_TIMER2=(unsigned)timer2_ISR;
 2803              		.loc 1 62 0
 2804 0248 AC319FE5 		ldr	r3, .L15+16
 2805 024c AC219FE5 		ldr	r2, .L15+20
 2806 0250 002083E5 		str	r2, [r3, #0]
  63:../timer.c    **** 	pISR_TIMER4=(unsigned)timer4_ISR;
 2807              		.loc 1 63 0
 2808 0254 A8319FE5 		ldr	r3, .L15+24
 2809 0258 A8219FE5 		ldr	r2, .L15+28
 2810 025c 002083E5 		str	r2, [r3, #0]
  64:../timer.c    **** 	rTCFG0 = rTCFG0 | 0xFFFFFF; //prescaler value 255
 2811              		.loc 1 64 0
 2812 0260 A4219FE5 		ldr	r2, .L15+32
 2813 0264 A0319FE5 		ldr	r3, .L15+32
 2814 0268 003093E5 		ldr	r3, [r3, #0]
 2815 026c 233CE0E1 		mvn	r3, r3, lsr #24
 2816 0270 033CE0E1 		mvn	r3, r3, asl #24
 2817 0274 003082E5 		str	r3, [r2, #0]
  65:../timer.c    **** 	rTCFG1 = rTCFG1 & 0xFF3F0F4; //divisor value, 1/16 timer4, 1/2 timer2, 1/32 timer0
 2818              		.loc 1 65 0
 2819 0278 90219FE5 		ldr	r2, .L15+36
 2820 027c 8C319FE5 		ldr	r3, .L15+36
 2821 0280 001093E5 		ldr	r1, [r3, #0]
 2822 0284 88319FE5 		ldr	r3, .L15+40
 2823 0288 033001E0 		and	r3, r1, r3
 2824 028c 003082E5 		str	r3, [r2, #0]
  66:../timer.c    **** 	//Timer count buffer registers
  67:../timer.c    **** 	rTCNTB0 = 65535; //timer0
 2825              		.loc 1 67 0
 2826 0290 80319FE5 		ldr	r3, .L15+44
 2827 0294 80219FE5 		ldr	r2, .L15+48
 2828 0298 002083E5 		str	r2, [r3, #0]
  68:../timer.c    **** 	rTCNTB2 = 65535; //timer2
 2829              		.loc 1 68 0
 2830 029c 7C319FE5 		ldr	r3, .L15+52
 2831 02a0 74219FE5 		ldr	r2, .L15+48
 2832 02a4 002083E5 		str	r2, [r3, #0]
  69:../timer.c    **** 	rTCNTB4 = 65535; //timer4
 2833              		.loc 1 69 0
 2834 02a8 74319FE5 		ldr	r3, .L15+56
 2835 02ac 68219FE5 		ldr	r2, .L15+48
 2836 02b0 002083E5 		str	r2, [r3, #0]
  70:../timer.c    **** 	//Timer compare buffer registers
  71:../timer.c    **** 	rTCMPB0 = 12800; //timer0
 2837              		.loc 1 71 0
 2838 02b4 6C319FE5 		ldr	r3, .L15+60
 2839 02b8 322CA0E3 		mov	r2, #12800
 2840 02bc 002083E5 		str	r2, [r3, #0]
  72:../timer.c    **** 	rTCMPB2 = 12800; //timer2
 2841              		.loc 1 72 0
 2842 02c0 64319FE5 		ldr	r3, .L15+64
 2843 02c4 322CA0E3 		mov	r2, #12800
 2844 02c8 002083E5 		str	r2, [r3, #0]
  73:../timer.c    **** 	rTCMPB4 = 12800; //timer4
 2845              		.loc 1 73 0
 2846 02cc 5C319FE5 		ldr	r3, .L15+68
 2847 02d0 322CA0E3 		mov	r2, #12800
 2848 02d4 002083E5 		str	r2, [r3, #0]
  74:../timer.c    **** 	//Enable timer0, timer2 interrupts
  75:../timer.c    **** 	rINTMSK = rINTMSK & ~(BIT_TIMER0 | BIT_TIMER2 | BIT_GLOBAL);
 2849              		.loc 1 75 0
 2850 02d8 54219FE5 		ldr	r2, .L15+72
 2851 02dc 50319FE5 		ldr	r3, .L15+72
 2852 02e0 003093E5 		ldr	r3, [r3, #0]
 2853 02e4 0133C3E3 		bic	r3, r3, #67108864
 2854 02e8 0A3BC3E3 		bic	r3, r3, #10240
 2855 02ec 003082E5 		str	r3, [r2, #0]
  76:../timer.c    **** 	/*Timer0 conf*/
  77:../timer.c    **** 	rTCON = rTCON | (0x01<<1);    // timer0 manual_update
 2856              		.loc 1 77 0
 2857 02f0 40319FE5 		ldr	r3, .L15+76
 2858 02f4 3C219FE5 		ldr	r2, .L15+76
 2859 02f8 002092E5 		ldr	r2, [r2, #0]
 2860 02fc 022082E3 		orr	r2, r2, #2
 2861 0300 002083E5 		str	r2, [r3, #0]
  78:../timer.c    **** 	rTCON = rTCON & ~(0x01<<1);   // timer0 disable manual_update
 2862              		.loc 1 78 0
 2863 0304 2C319FE5 		ldr	r3, .L15+76
 2864 0308 28219FE5 		ldr	r2, .L15+76
 2865 030c 002092E5 		ldr	r2, [r2, #0]
 2866 0310 0220C2E3 		bic	r2, r2, #2
 2867 0314 002083E5 		str	r2, [r3, #0]
  79:../timer.c    **** 	rTCON = rTCON | (0x01<<3);    // timer0 auto-reload
 2868              		.loc 1 79 0
 2869 0318 18319FE5 		ldr	r3, .L15+76
 2870 031c 14219FE5 		ldr	r2, .L15+76
 2871 0320 002092E5 		ldr	r2, [r2, #0]
 2872 0324 082082E3 		orr	r2, r2, #8
 2873 0328 002083E5 		str	r2, [r3, #0]
  80:../timer.c    **** 	rTCON = rTCON | (0x01<<0);    // timer0 start
 2874              		.loc 1 80 0
 2875 032c 04319FE5 		ldr	r3, .L15+76
 2876 0330 00219FE5 		ldr	r2, .L15+76
 2877 0334 002092E5 		ldr	r2, [r2, #0]
 2878 0338 012082E3 		orr	r2, r2, #1
 2879 033c 002083E5 		str	r2, [r3, #0]
  81:../timer.c    **** 	/*Timer2 conf*/
  82:../timer.c    **** 	rTCON = rTCON | (0x01<<13);   // timer2 manual_update
 2880              		.loc 1 82 0
 2881 0340 F0309FE5 		ldr	r3, .L15+76
 2882 0344 EC209FE5 		ldr	r2, .L15+76
 2883 0348 002092E5 		ldr	r2, [r2, #0]
 2884 034c 022A82E3 		orr	r2, r2, #8192
 2885 0350 002083E5 		str	r2, [r3, #0]
  83:../timer.c    **** 	rTCON = rTCON & ~(0x01<<13);  // timer2 disable manual_update
 2886              		.loc 1 83 0
 2887 0354 DC309FE5 		ldr	r3, .L15+76
 2888 0358 D8209FE5 		ldr	r2, .L15+76
 2889 035c 002092E5 		ldr	r2, [r2, #0]
 2890 0360 022AC2E3 		bic	r2, r2, #8192
 2891 0364 002083E5 		str	r2, [r3, #0]
  84:../timer.c    **** 	rTCON = rTCON | (0x01<<15);   // timer2 auto-reload
 2892              		.loc 1 84 0
 2893 0368 C8309FE5 		ldr	r3, .L15+76
 2894 036c C4209FE5 		ldr	r2, .L15+76
 2895 0370 002092E5 		ldr	r2, [r2, #0]
 2896 0374 022982E3 		orr	r2, r2, #32768
 2897 0378 002083E5 		str	r2, [r3, #0]
  85:../timer.c    **** 	rTCON = rTCON | (0x01<<12);   // timer2 start 
 2898              		.loc 1 85 0
 2899 037c B4309FE5 		ldr	r3, .L15+76
 2900 0380 B0209FE5 		ldr	r2, .L15+76
 2901 0384 002092E5 		ldr	r2, [r2, #0]
 2902 0388 012A82E3 		orr	r2, r2, #4096
 2903 038c 002083E5 		str	r2, [r3, #0]
  86:../timer.c    **** 	/*Timer4 conf*/
  87:../timer.c    **** 	rTCON = rTCON | (0x01<<21);   // timer4 manual_update
 2904              		.loc 1 87 0
 2905 0390 A0309FE5 		ldr	r3, .L15+76
 2906 0394 9C209FE5 		ldr	r2, .L15+76
 2907 0398 002092E5 		ldr	r2, [r2, #0]
 2908 039c 022682E3 		orr	r2, r2, #2097152
 2909 03a0 002083E5 		str	r2, [r3, #0]
  88:../timer.c    **** 	rTCON = rTCON & ~(0x01<<21);  // timer4 disable manual_update
 2910              		.loc 1 88 0
 2911 03a4 8C309FE5 		ldr	r3, .L15+76
 2912 03a8 88209FE5 		ldr	r2, .L15+76
 2913 03ac 002092E5 		ldr	r2, [r2, #0]
 2914 03b0 0226C2E3 		bic	r2, r2, #2097152
 2915 03b4 002083E5 		str	r2, [r3, #0]
  89:../timer.c    **** 	rTCON = rTCON | (0x1<<23);    // timer4 one-shot
 2916              		.loc 1 89 0
 2917 03b8 78309FE5 		ldr	r3, .L15+76
 2918 03bc 74209FE5 		ldr	r2, .L15+76
 2919 03c0 002092E5 		ldr	r2, [r2, #0]
 2920 03c4 022582E3 		orr	r2, r2, #8388608
 2921 03c8 002083E5 		str	r2, [r3, #0]
  90:../timer.c    **** 	//rTCON = rTCON | (0x00<<20);   // timer4 stop
  91:../timer.c    **** 	rTCON = rTCON | (0x01<<20);   // timer4 start
 2922              		.loc 1 91 0
 2923 03cc 64309FE5 		ldr	r3, .L15+76
 2924 03d0 60209FE5 		ldr	r2, .L15+76
 2925 03d4 002092E5 		ldr	r2, [r2, #0]
 2926 03d8 012682E3 		orr	r2, r2, #1048576
 2927 03dc 002083E5 		str	r2, [r3, #0]
  92:../timer.c    **** 	
  93:../timer.c    **** 	/*All together
  94:../timer.c    **** 	rTCON = rTCON | (0x01<<1);    // timer0 manual_update
  95:../timer.c    **** 	rTCON = rTCON & ~(0x01<<1);   // timer0 disable manual_update
  96:../timer.c    **** 	rTCON = rTCON | (0x01<<13);   // timer2 manual_update
  97:../timer.c    **** 	rTCON = rTCON & ~(0x01<<13);  // timer2 disable manual_update
  98:../timer.c    **** 	rTCON = rTCON | (0x01<<21);   // timer4 manual_update
  99:../timer.c    **** 	rTCON = rTCON & ~(0x01<<21);  // timer4 disable manual_update
 100:../timer.c    **** 	rTCON = rTCON | 0x808008;     //timer0 timer2 timer4 autoreload
 101:../timer.c    **** 	rTCON = rTCON | 0x1001;     //timer0 timer2 start
 102:../timer.c    **** 	*/
 103:../timer.c    **** 
 104:../timer.c    **** }
 2928              		.loc 1 104 0
 2929 03e0 0CD04BE2 		sub	sp, fp, #12
 2930 03e4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2931 03e8 1EFF2FE1 		bx	lr
 2932              	.L16:
 2933              		.align	2
 2934              	.L15:
 2935 03ec 00000000 		.word	cont
 2936 03f0 0800E001 		.word	31457288
 2937 03f4 54FF7F0C 		.word	209715028
 2938 03f8 00000000 		.word	timer0_ISR
 2939 03fc 4CFF7F0C 		.word	209715020
 2940 0400 00000000 		.word	timer2_ISR
 2941 0404 44FF7F0C 		.word	209715012
 2942 0408 00000000 		.word	timer4_ISR
 2943 040c 0000D501 		.word	30736384
 2944 0410 0400D501 		.word	30736388
 2945 0414 F4F0F30F 		.word	267645172
 2946 0418 0C00D501 		.word	30736396
 2947 041c FFFF0000 		.word	65535
 2948 0420 2400D501 		.word	30736420
 2949 0424 3C00D501 		.word	30736444
 2950 0428 1000D501 		.word	30736400
 2951 042c 2800D501 		.word	30736424
 2952 0430 4000D501 		.word	30736448
 2953 0434 0C00E001 		.word	31457292
 2954 0438 0800D501 		.word	30736392
 2955              		.cfi_endproc
 2956              	.LFE2:
 2958              		.align	2
 2959              		.global	timer0_ISR
 2961              	timer0_ISR:
 2962              	.LFB3:
 105:../timer.c    **** 
 106:../timer.c    **** void timer0_ISR(void)
 107:../timer.c    **** {
 2963              		.loc 1 107 0
 2964              		.cfi_startproc
 2965              		@ Interrupt Service Routine.
 2966              		@ args = 0, pretend = 0, frame = 0
 2967              		@ frame_needed = 1, uses_anonymous_args = 0
 2968 043c 04C02DE5 		str	ip, [sp, #-4]!
 2969 0440 0DC0A0E1 		mov	ip, sp
 2970              	.LCFI6:
 2971              		.cfi_def_cfa_register 12
 2972 0444 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 2973 0448 04B04CE2 		sub	fp, ip, #4
 2974              		.cfi_offset 14, -8
 2975              		.cfi_offset 13, -12
 2976              		.cfi_offset 11, -16
 2977              		.cfi_offset 3, -20
 2978              		.cfi_offset 2, -24
 2979              		.cfi_offset 1, -28
 2980              		.cfi_offset 0, -32
 2981              	.LCFI7:
 2982              		.cfi_def_cfa 11, 4
 108:../timer.c    **** 	DelayMs(100);
 2983              		.loc 1 108 0
 2984 044c 6400A0E3 		mov	r0, #100
 2985 0450 FEFFFFEB 		bl	DelayMs
 109:../timer.c    **** 	cont--;
 2986              		.loc 1 109 0
 2987 0454 98309FE5 		ldr	r3, .L19
 2988 0458 003093E5 		ldr	r3, [r3, #0]
 2989 045c 012043E2 		sub	r2, r3, #1
 2990 0460 8C309FE5 		ldr	r3, .L19
 2991 0464 002083E5 		str	r2, [r3, #0]
 110:../timer.c    **** 	D8Led_symbol(numbers[cont]);
 2992              		.loc 1 110 0
 2993 0468 84309FE5 		ldr	r3, .L19
 2994 046c 002093E5 		ldr	r2, [r3, #0]
 2995 0470 80309FE5 		ldr	r3, .L19+4
 2996 0474 023193E7 		ldr	r3, [r3, r2, asl #2]
 2997 0478 0300A0E1 		mov	r0, r3
 2998 047c FEFFFFEB 		bl	D8Led_symbol
 111:../timer.c    **** 	if (cont == 0) {
 2999              		.loc 1 111 0
 3000 0480 6C309FE5 		ldr	r3, .L19
 3001 0484 003093E5 		ldr	r3, [r3, #0]
 3002 0488 000053E3 		cmp	r3, #0
 3003 048c 1100001A 		bne	.L18
 112:../timer.c    **** 		rINTMSK = rINTMSK | BIT_TIMER0; //disable timer0 
 3004              		.loc 1 112 0
 3005 0490 64309FE5 		ldr	r3, .L19+8
 3006 0494 60209FE5 		ldr	r2, .L19+8
 3007 0498 002092E5 		ldr	r2, [r2, #0]
 3008 049c 022A82E3 		orr	r2, r2, #8192
 3009 04a0 002083E5 		str	r2, [r3, #0]
 113:../timer.c    **** 		rI_ISPC = BIT_TIMER0;
 3010              		.loc 1 113 0
 3011 04a4 54309FE5 		ldr	r3, .L19+12
 3012 04a8 022AA0E3 		mov	r2, #8192
 3013 04ac 002083E5 		str	r2, [r3, #0]
 114:../timer.c    **** 		key = -1;
 3014              		.loc 1 114 0
 3015 04b0 4C309FE5 		ldr	r3, .L19+16
 3016 04b4 0020E0E3 		mvn	r2, #0
 3017 04b8 002083E5 		str	r2, [r3, #0]
 115:../timer.c    **** 		DelayMs(800);
 3018              		.loc 1 115 0
 3019 04bc 320EA0E3 		mov	r0, #800
 3020 04c0 FEFFFFEB 		bl	DelayMs
 116:../timer.c    **** 		rINTMSK = rINTMSK & ~(BIT_TIMER4); //enable timer4
 3021              		.loc 1 116 0
 3022 04c4 30309FE5 		ldr	r3, .L19+8
 3023 04c8 2C209FE5 		ldr	r2, .L19+8
 3024 04cc 002092E5 		ldr	r2, [r2, #0]
 3025 04d0 022CC2E3 		bic	r2, r2, #512
 3026 04d4 002083E5 		str	r2, [r3, #0]
 3027              	.L18:
 117:../timer.c    **** 	}
 118:../timer.c    **** 	rI_ISPC = BIT_TIMER0;
 3028              		.loc 1 118 0
 3029 04d8 20309FE5 		ldr	r3, .L19+12
 3030 04dc 022AA0E3 		mov	r2, #8192
 3031 04e0 002083E5 		str	r2, [r3, #0]
 119:../timer.c    **** }
 3032              		.loc 1 119 0
 3033 04e4 1CD04BE2 		sub	sp, fp, #28
 3034 04e8 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3035 04ec 04C09DE4 		ldmfd	sp!, {ip}
 3036 04f0 04F05EE2 		subs	pc, lr, #4
 3037              	.L20:
 3038              		.align	2
 3039              	.L19:
 3040 04f4 00000000 		.word	cont
 3041 04f8 00000000 		.word	numbers
 3042 04fc 0C00E001 		.word	31457292
 3043 0500 2400E001 		.word	31457316
 3044 0504 00000000 		.word	key
 3045              		.cfi_endproc
 3046              	.LFE3:
 3048              		.align	2
 3049              		.global	timer2_ISR
 3051              	timer2_ISR:
 3052              	.LFB4:
 120:../timer.c    **** 
 121:../timer.c    **** void timer2_ISR(void)
 122:../timer.c    **** {
 3053              		.loc 1 122 0
 3054              		.cfi_startproc
 3055              		@ Interrupt Service Routine.
 3056              		@ args = 0, pretend = 0, frame = 0
 3057              		@ frame_needed = 1, uses_anonymous_args = 0
 3058 0508 04C02DE5 		str	ip, [sp, #-4]!
 3059 050c 0DC0A0E1 		mov	ip, sp
 3060              	.LCFI8:
 3061              		.cfi_def_cfa_register 12
 3062 0510 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 3063 0514 04B04CE2 		sub	fp, ip, #4
 3064              		.cfi_offset 14, -8
 3065              		.cfi_offset 13, -12
 3066              		.cfi_offset 11, -16
 3067              		.cfi_offset 3, -20
 3068              		.cfi_offset 2, -24
 3069              		.cfi_offset 1, -28
 3070              		.cfi_offset 0, -32
 3071              	.LCFI9:
 3072              		.cfi_def_cfa 11, 4
 123:../timer.c    **** 	if (row) {
 3073              		.loc 1 123 0
 3074 0518 48309FE5 		ldr	r3, .L24
 3075 051c 003093E5 		ldr	r3, [r3, #0]
 3076 0520 000053E3 		cmp	r3, #0
 3077 0524 0400000A 		beq	.L22
 3078              	.LBB6:
 124:../timer.c    **** 	    led1_on();
 3079              		.loc 1 124 0
 3080 0528 FEFFFFEB 		bl	led1_on
 125:../timer.c    **** 	    DelayMs(30);
 3081              		.loc 1 125 0
 3082 052c 1E00A0E3 		mov	r0, #30
 3083 0530 FEFFFFEB 		bl	DelayMs
 126:../timer.c    **** 	    led1_off();
 3084              		.loc 1 126 0
 3085 0534 FEFFFFEB 		bl	led1_off
 3086 0538 030000EA 		b	.L23
 3087              	.L22:
 3088              	.LBE6:
 3089              	.LBB7:
 127:../timer.c    **** 	}
 128:../timer.c    **** 	else {
 129:../timer.c    **** 	    led2_on();
 3090              		.loc 1 129 0
 3091 053c FEFFFFEB 		bl	led2_on
 130:../timer.c    **** 	    DelayMs(30);
 3092              		.loc 1 130 0
 3093 0540 1E00A0E3 		mov	r0, #30
 3094 0544 FEFFFFEB 		bl	DelayMs
 131:../timer.c    **** 	    led2_off();
 3095              		.loc 1 131 0
 3096 0548 FEFFFFEB 		bl	led2_off
 3097              	.L23:
 3098              	.LBE7:
 132:../timer.c    **** 	}
 133:../timer.c    **** 	rI_ISPC = BIT_TIMER2;
 3099              		.loc 1 133 0
 3100 054c 18309FE5 		ldr	r3, .L24+4
 3101 0550 022BA0E3 		mov	r2, #2048
 3102 0554 002083E5 		str	r2, [r3, #0]
 134:../timer.c    **** }
 3103              		.loc 1 134 0
 3104 0558 1CD04BE2 		sub	sp, fp, #28
 3105 055c 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3106 0560 04C09DE4 		ldmfd	sp!, {ip}
 3107 0564 04F05EE2 		subs	pc, lr, #4
 3108              	.L25:
 3109              		.align	2
 3110              	.L24:
 3111 0568 00000000 		.word	row
 3112 056c 2400E001 		.word	31457316
 3113              		.cfi_endproc
 3114              	.LFE4:
 3116              		.align	2
 3117              		.global	timer4_ISR
 3119              	timer4_ISR:
 3120              	.LFB5:
 135:../timer.c    **** 
 136:../timer.c    **** void timer4_ISR(void)
 137:../timer.c    **** {
 3121              		.loc 1 137 0
 3122              		.cfi_startproc
 3123              		@ Interrupt Service Routine.
 3124              		@ args = 0, pretend = 0, frame = 0
 3125              		@ frame_needed = 1, uses_anonymous_args = 0
 3126 0570 04C02DE5 		str	ip, [sp, #-4]!
 3127 0574 0DC0A0E1 		mov	ip, sp
 3128              	.LCFI10:
 3129              		.cfi_def_cfa_register 12
 3130 0578 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 3131 057c 04B04CE2 		sub	fp, ip, #4
 3132              		.cfi_offset 14, -8
 3133              		.cfi_offset 13, -12
 3134              		.cfi_offset 11, -16
 3135              		.cfi_offset 3, -20
 3136              		.cfi_offset 2, -24
 3137              		.cfi_offset 1, -28
 3138              		.cfi_offset 0, -32
 3139              	.LCFI11:
 3140              		.cfi_def_cfa 11, 4
 138:../timer.c    **** 	/*Check if keyboard was pressed*/
 139:../timer.c    **** 	if (key == -1 || key != numbers[3]) //mistake
 3141              		.loc 1 139 0
 3142 0580 A0309FE5 		ldr	r3, .L30
 3143 0584 003093E5 		ldr	r3, [r3, #0]
 3144 0588 010073E3 		cmn	r3, #1
 3145 058c 0500000A 		beq	.L27
 3146              		.loc 1 139 0 is_stmt 0 discriminator 1
 3147 0590 94309FE5 		ldr	r3, .L30+4
 3148 0594 0C2093E5 		ldr	r2, [r3, #12]
 3149 0598 88309FE5 		ldr	r3, .L30
 3150 059c 003093E5 		ldr	r3, [r3, #0]
 3151 05a0 030052E1 		cmp	r2, r3
 3152 05a4 0400000A 		beq	.L28
 3153              	.L27:
 140:../timer.c    **** 	    D8Led_symbol(numbers[3]);
 3154              		.loc 1 140 0 is_stmt 1
 3155 05a8 7C309FE5 		ldr	r3, .L30+4
 3156 05ac 0C3093E5 		ldr	r3, [r3, #12]
 3157 05b0 0300A0E1 		mov	r0, r3
 3158 05b4 FEFFFFEB 		bl	D8Led_symbol
 3159 05b8 030000EA 		b	.L29
 3160              	.L28:
 141:../timer.c    **** 	else
 142:../timer.c    **** 	    D8Led_symbol_correct(numbers[3]);
 3161              		.loc 1 142 0
 3162 05bc 68309FE5 		ldr	r3, .L30+4
 3163 05c0 0C3093E5 		ldr	r3, [r3, #12]
 3164 05c4 0300A0E1 		mov	r0, r3
 3165 05c8 FEFFFFEB 		bl	D8Led_symbol_correct
 3166              	.L29:
 143:../timer.c    **** 	rINTMSK = rINTMSK | BIT_TIMER4; //disable timer4
 3167              		.loc 1 143 0
 3168 05cc 5C309FE5 		ldr	r3, .L30+8
 3169 05d0 58209FE5 		ldr	r2, .L30+8
 3170 05d4 002092E5 		ldr	r2, [r2, #0]
 3171 05d8 022C82E3 		orr	r2, r2, #512
 3172 05dc 002083E5 		str	r2, [r3, #0]
 144:../timer.c    **** 	rI_ISPC = BIT_TIMER4;
 3173              		.loc 1 144 0
 3174 05e0 4C309FE5 		ldr	r3, .L30+12
 3175 05e4 022CA0E3 		mov	r2, #512
 3176 05e8 002083E5 		str	r2, [r3, #0]
 145:../timer.c    **** 	DelayMs(1200);
 3177              		.loc 1 145 0
 3178 05ec 4B0EA0E3 		mov	r0, #1200
 3179 05f0 FEFFFFEB 		bl	DelayMs
 146:../timer.c    **** 	random_number_generator();
 3180              		.loc 1 146 0
 3181 05f4 FEFFFFEB 		bl	random_number_generator
 147:../timer.c    **** 	cont = 3;
 3182              		.loc 1 147 0
 3183 05f8 38309FE5 		ldr	r3, .L30+16
 3184 05fc 0320A0E3 		mov	r2, #3
 3185 0600 002083E5 		str	r2, [r3, #0]
 148:../timer.c    **** 	rINTMSK = rINTMSK & ~(BIT_TIMER0); //enable timer0
 3186              		.loc 1 148 0
 3187 0604 24309FE5 		ldr	r3, .L30+8
 3188 0608 20209FE5 		ldr	r2, .L30+8
 3189 060c 002092E5 		ldr	r2, [r2, #0]
 3190 0610 022AC2E3 		bic	r2, r2, #8192
 3191 0614 002083E5 		str	r2, [r3, #0]
 149:../timer.c    **** }
 3192              		.loc 1 149 0
 3193 0618 1CD04BE2 		sub	sp, fp, #28
 3194 061c 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3195 0620 04C09DE4 		ldmfd	sp!, {ip}
 3196 0624 04F05EE2 		subs	pc, lr, #4
 3197              	.L31:
 3198              		.align	2
 3199              	.L30:
 3200 0628 00000000 		.word	key
 3201 062c 00000000 		.word	numbers
 3202 0630 0C00E001 		.word	31457292
 3203 0634 2400E001 		.word	31457316
 3204 0638 00000000 		.word	cont
 3205              		.cfi_endproc
 3206              	.LFE5:
 3208              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
                            *COM*:00000004 cont
                            *COM*:00000010 numbers
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:2551   .text:00000000 $a
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:2554   .text:00000000 shuffle
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:2656   .text:00000104 random_number_generator
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:2760   .text:00000200 $d
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:2765   .text:00000208 $a
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:2768   .text:00000208 timers_init
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:2935   .text:000003ec $d
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:2961   .text:0000043c timer0_ISR
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:3051   .text:00000508 timer2_ISR
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:3119   .text:00000570 timer4_ISR
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:2958   .text:0000043c $a
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:3040   .text:000004f4 $d
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:3048   .text:00000508 $a
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:3111   .text:00000568 $d
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:3116   .text:00000570 $a
C:\Users\USUARI~1\AppData\Local\Temp\cczmN9ZE.s:3200   .text:00000628 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
rand
row
DelayMs
D8Led_symbol
key
led1_on
led1_off
led2_on
led2_off
D8Led_symbol_correct
