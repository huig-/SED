   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"timer.c"
  21              	.Ltext0:
  22              		.file 1 "../timer.c"
 2551              		.align	2
 2552              		.global	shuffle
 2554              	shuffle:
 2555              	.LFB0:
   1:../timer.c    **** /*--- ficheros de cabecera ---*/
   2:../timer.c    **** #include "44b.h"
   3:../timer.c    **** #include "44blib.h"
   4:../timer.c    **** #include <stdlib.h>
   5:../timer.c    **** 
   6:../timer.c    **** /* Variables globales */
   7:../timer.c    **** int cont;
   8:../timer.c    **** int numbers[4];
   9:../timer.c    **** /*--- funciones externas ---*/
  10:../timer.c    **** extern void D8Led_symbol(int value);
  11:../timer.c    **** extern void D8Led_symbol_correct(int value);
  12:../timer.c    **** extern int row;
  13:../timer.c    **** extern int key;
  14:../timer.c    **** extern void leds_switch(void);
  15:../timer.c    **** /*--- declaracion de funciones ---*/
  16:../timer.c    **** void timers_init(void);
  17:../timer.c    **** void timer0_ISR(void) __attribute__ ((interrupt ("IRQ")));
  18:../timer.c    **** void timer1_ISR(void) __attribute__ ((interrupt ("IRQ")));
  19:../timer.c    **** void timer2_ISR(void) __attribute__ ((interrupt ("IRQ")));
  20:../timer.c    **** void timer4_ISR(void) __attribute__ ((interrupt ("IRQ")));
  21:../timer.c    **** void shuffle(int *array, int n);
  22:../timer.c    **** void random_number_generator(void);
  23:../timer.c    **** /*--- codigo de las funciones ---*/
  24:../timer.c    **** 
  25:../timer.c    **** void shuffle(int *array, int n)
  26:../timer.c    **** {
 2556              		.loc 1 26 0
 2557              		.cfi_startproc
 2558              		@ Function supports interworking.
 2559              		@ args = 0, pretend = 0, frame = 24
 2560              		@ frame_needed = 1, uses_anonymous_args = 0
 2561 0000 0DC0A0E1 		mov	ip, sp
 2562              	.LCFI0:
 2563              		.cfi_def_cfa_register 12
 2564 0004 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 2565 0008 04B04CE2 		sub	fp, ip, #4
 2566              		.cfi_offset 14, -8
 2567              		.cfi_offset 13, -12
 2568              		.cfi_offset 11, -16
 2569              		.cfi_offset 4, -20
 2570              	.LCFI1:
 2571              		.cfi_def_cfa 11, 4
 2572 000c 1CD04DE2 		sub	sp, sp, #28
 2573 0010 28000BE5 		str	r0, [fp, #-40]
 2574 0014 2C100BE5 		str	r1, [fp, #-44]
  27:../timer.c    ****     if (n > 1)
 2575              		.loc 1 27 0
 2576 0018 2C301BE5 		ldr	r3, [fp, #-44]
 2577 001c 010053E3 		cmp	r3, #1
 2578 0020 340000DA 		ble	.L1
 2579              	.LBB2:
  28:../timer.c    ****     {
  29:../timer.c    ****         size_t i;
  30:../timer.c    ****         for (i = 0; i < n - 1; i++)
 2580              		.loc 1 30 0
 2581 0024 0030A0E3 		mov	r3, #0
 2582 0028 18300BE5 		str	r3, [fp, #-24]
 2583 002c 2B0000EA 		b	.L3
 2584              	.L4:
 2585              	.LBB3:
  31:../timer.c    ****         {
  32:../timer.c    ****           size_t j = i + rand() / (RAND_MAX / (n - i) + 1);
 2586              		.loc 1 32 0 discriminator 2
 2587 0030 FEFFFFEB 		bl	rand
 2588 0034 0030A0E1 		mov	r3, r0
 2589 0038 0340A0E1 		mov	r4, r3
 2590 003c 2C201BE5 		ldr	r2, [fp, #-44]
 2591 0040 18301BE5 		ldr	r3, [fp, #-24]
 2592 0044 023063E0 		rsb	r3, r3, r2
 2593 0048 0201E0E3 		mvn	r0, #-2147483648
 2594 004c 0310A0E1 		mov	r1, r3
 2595 0050 FEFFFFEB 		bl	__aeabi_uidiv
 2596 0054 0030A0E1 		mov	r3, r0
 2597 0058 013083E2 		add	r3, r3, #1
 2598 005c 0400A0E1 		mov	r0, r4
 2599 0060 0310A0E1 		mov	r1, r3
 2600 0064 FEFFFFEB 		bl	__aeabi_uidiv
 2601 0068 0030A0E1 		mov	r3, r0
 2602 006c 0320A0E1 		mov	r2, r3
 2603 0070 18301BE5 		ldr	r3, [fp, #-24]
 2604 0074 033082E0 		add	r3, r2, r3
 2605 0078 1C300BE5 		str	r3, [fp, #-28]
  33:../timer.c    ****           int t = array[j];
 2606              		.loc 1 33 0 discriminator 2
 2607 007c 1C301BE5 		ldr	r3, [fp, #-28]
 2608 0080 0331A0E1 		mov	r3, r3, asl #2
 2609 0084 28201BE5 		ldr	r2, [fp, #-40]
 2610 0088 033082E0 		add	r3, r2, r3
 2611 008c 003093E5 		ldr	r3, [r3, #0]
 2612 0090 20300BE5 		str	r3, [fp, #-32]
  34:../timer.c    ****           array[j] = array[i];
 2613              		.loc 1 34 0 discriminator 2
 2614 0094 1C301BE5 		ldr	r3, [fp, #-28]
 2615 0098 0331A0E1 		mov	r3, r3, asl #2
 2616 009c 28201BE5 		ldr	r2, [fp, #-40]
 2617 00a0 033082E0 		add	r3, r2, r3
 2618 00a4 18201BE5 		ldr	r2, [fp, #-24]
 2619 00a8 0221A0E1 		mov	r2, r2, asl #2
 2620 00ac 28101BE5 		ldr	r1, [fp, #-40]
 2621 00b0 022081E0 		add	r2, r1, r2
 2622 00b4 002092E5 		ldr	r2, [r2, #0]
 2623 00b8 002083E5 		str	r2, [r3, #0]
  35:../timer.c    ****           array[i] = t;
 2624              		.loc 1 35 0 discriminator 2
 2625 00bc 18301BE5 		ldr	r3, [fp, #-24]
 2626 00c0 0331A0E1 		mov	r3, r3, asl #2
 2627 00c4 28201BE5 		ldr	r2, [fp, #-40]
 2628 00c8 033082E0 		add	r3, r2, r3
 2629 00cc 20201BE5 		ldr	r2, [fp, #-32]
 2630 00d0 002083E5 		str	r2, [r3, #0]
 2631              	.LBE3:
  30:../timer.c    ****         for (i = 0; i < n - 1; i++)
 2632              		.loc 1 30 0 discriminator 2
 2633 00d4 18301BE5 		ldr	r3, [fp, #-24]
 2634 00d8 013083E2 		add	r3, r3, #1
 2635 00dc 18300BE5 		str	r3, [fp, #-24]
 2636              	.L3:
  30:../timer.c    ****         for (i = 0; i < n - 1; i++)
 2637              		.loc 1 30 0 is_stmt 0 discriminator 1
 2638 00e0 2C301BE5 		ldr	r3, [fp, #-44]
 2639 00e4 013043E2 		sub	r3, r3, #1
 2640 00e8 0320A0E1 		mov	r2, r3
 2641 00ec 18301BE5 		ldr	r3, [fp, #-24]
 2642 00f0 030052E1 		cmp	r2, r3
 2643 00f4 CDFFFF8A 		bhi	.L4
 2644              	.L1:
 2645              	.LBE2:
  36:../timer.c    ****         }
  37:../timer.c    ****     }
  38:../timer.c    **** }
 2646              		.loc 1 38 0 is_stmt 1
 2647 00f8 10D04BE2 		sub	sp, fp, #16
 2648 00fc 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 2649 0100 1EFF2FE1 		bx	lr
 2650              		.cfi_endproc
 2651              	.LFE0:
 2653              		.align	2
 2654              		.global	random_number_generator
 2656              	random_number_generator:
 2657              	.LFB1:
  39:../timer.c    **** 
  40:../timer.c    **** void random_number_generator(void)
  41:../timer.c    **** {
 2658              		.loc 1 41 0
 2659              		.cfi_startproc
 2660              		@ Function supports interworking.
 2661              		@ args = 0, pretend = 0, frame = 16
 2662              		@ frame_needed = 1, uses_anonymous_args = 0
 2663 0104 0DC0A0E1 		mov	ip, sp
 2664              	.LCFI2:
 2665              		.cfi_def_cfa_register 12
 2666 0108 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2667 010c 04B04CE2 		sub	fp, ip, #4
 2668              		.cfi_offset 14, -8
 2669              		.cfi_offset 13, -12
 2670              		.cfi_offset 11, -16
 2671              	.LCFI3:
 2672              		.cfi_def_cfa 11, 4
 2673 0110 10D04DE2 		sub	sp, sp, #16
  42:../timer.c    **** 	int i;
  43:../timer.c    **** 	if (row) {
 2674              		.loc 1 43 0
 2675 0114 E4309FE5 		ldr	r3, .L12
 2676 0118 003093E5 		ldr	r3, [r3, #0]
 2677 011c 000053E3 		cmp	r3, #0
 2678 0120 1800000A 		beq	.L6
 2679              	.LBB4:
  44:../timer.c    **** 		int num_row = rand() % 4;
 2680              		.loc 1 44 0
 2681 0124 FEFFFFEB 		bl	rand
 2682 0128 0020A0E1 		mov	r2, r0
 2683 012c C23FA0E1 		mov	r3, r2, asr #31
 2684 0130 233FA0E1 		mov	r3, r3, lsr #30
 2685 0134 032082E0 		add	r2, r2, r3
 2686 0138 032002E2 		and	r2, r2, #3
 2687 013c 023063E0 		rsb	r3, r3, r2
 2688 0140 14300BE5 		str	r3, [fp, #-20]
  45:../timer.c    **** 		for (i = 0; i < 4; i++)
 2689              		.loc 1 45 0
 2690 0144 0030A0E3 		mov	r3, #0
 2691 0148 10300BE5 		str	r3, [fp, #-16]
 2692 014c 090000EA 		b	.L7
 2693              	.L8:
  46:../timer.c    **** 			numbers[i] = i + 4 * num_row;
 2694              		.loc 1 46 0 discriminator 2
 2695 0150 14301BE5 		ldr	r3, [fp, #-20]
 2696 0154 0321A0E1 		mov	r2, r3, asl #2
 2697 0158 10301BE5 		ldr	r3, [fp, #-16]
 2698 015c 031082E0 		add	r1, r2, r3
 2699 0160 9C309FE5 		ldr	r3, .L12+4
 2700 0164 10201BE5 		ldr	r2, [fp, #-16]
 2701 0168 021183E7 		str	r1, [r3, r2, asl #2]
  45:../timer.c    **** 		for (i = 0; i < 4; i++)
 2702              		.loc 1 45 0 discriminator 2
 2703 016c 10301BE5 		ldr	r3, [fp, #-16]
 2704 0170 013083E2 		add	r3, r3, #1
 2705 0174 10300BE5 		str	r3, [fp, #-16]
 2706              	.L7:
  45:../timer.c    **** 		for (i = 0; i < 4; i++)
 2707              		.loc 1 45 0 is_stmt 0 discriminator 1
 2708 0178 10301BE5 		ldr	r3, [fp, #-16]
 2709 017c 030053E3 		cmp	r3, #3
 2710 0180 F2FFFFDA 		ble	.L8
  45:../timer.c    **** 		for (i = 0; i < 4; i++)
 2711              		.loc 1 45 0
 2712 0184 170000EA 		b	.L9
 2713              	.L6:
 2714              	.LBE4:
 2715              	.LBB5:
  47:../timer.c    **** 	}
  48:../timer.c    **** 	else {
  49:../timer.c    **** 		int num_col = rand() % 4;
 2716              		.loc 1 49 0 is_stmt 1
 2717 0188 FEFFFFEB 		bl	rand
 2718 018c 0020A0E1 		mov	r2, r0
 2719 0190 C23FA0E1 		mov	r3, r2, asr #31
 2720 0194 233FA0E1 		mov	r3, r3, lsr #30
 2721 0198 032082E0 		add	r2, r2, r3
 2722 019c 032002E2 		and	r2, r2, #3
 2723 01a0 023063E0 		rsb	r3, r3, r2
 2724 01a4 18300BE5 		str	r3, [fp, #-24]
  50:../timer.c    **** 		for (i = 0; i < 4; i++)
 2725              		.loc 1 50 0
 2726 01a8 0030A0E3 		mov	r3, #0
 2727 01ac 10300BE5 		str	r3, [fp, #-16]
 2728 01b0 090000EA 		b	.L10
 2729              	.L11:
  51:../timer.c    **** 			numbers[i] = 4 * i + num_col;
 2730              		.loc 1 51 0 discriminator 2
 2731 01b4 10301BE5 		ldr	r3, [fp, #-16]
 2732 01b8 0321A0E1 		mov	r2, r3, asl #2
 2733 01bc 18301BE5 		ldr	r3, [fp, #-24]
 2734 01c0 031082E0 		add	r1, r2, r3
 2735 01c4 38309FE5 		ldr	r3, .L12+4
 2736 01c8 10201BE5 		ldr	r2, [fp, #-16]
 2737 01cc 021183E7 		str	r1, [r3, r2, asl #2]
  50:../timer.c    **** 		for (i = 0; i < 4; i++)
 2738              		.loc 1 50 0 discriminator 2
 2739 01d0 10301BE5 		ldr	r3, [fp, #-16]
 2740 01d4 013083E2 		add	r3, r3, #1
 2741 01d8 10300BE5 		str	r3, [fp, #-16]
 2742              	.L10:
  50:../timer.c    **** 		for (i = 0; i < 4; i++)
 2743              		.loc 1 50 0 is_stmt 0 discriminator 1
 2744 01dc 10301BE5 		ldr	r3, [fp, #-16]
 2745 01e0 030053E3 		cmp	r3, #3
 2746 01e4 F2FFFFDA 		ble	.L11
 2747              	.L9:
 2748              	.LBE5:
  52:../timer.c    **** 	}
  53:../timer.c    **** 	shuffle(numbers, 4);
 2749              		.loc 1 53 0 is_stmt 1
 2750 01e8 14009FE5 		ldr	r0, .L12+4
 2751 01ec 0410A0E3 		mov	r1, #4
 2752 01f0 FEFFFFEB 		bl	shuffle
  54:../timer.c    **** }
 2753              		.loc 1 54 0
 2754 01f4 0CD04BE2 		sub	sp, fp, #12
 2755 01f8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2756 01fc 1EFF2FE1 		bx	lr
 2757              	.L13:
 2758              		.align	2
 2759              	.L12:
 2760 0200 00000000 		.word	row
 2761 0204 00000000 		.word	numbers
 2762              		.cfi_endproc
 2763              	.LFE1:
 2765              		.align	2
 2766              		.global	timers_init
 2768              	timers_init:
 2769              	.LFB2:
  55:../timer.c    **** 
  56:../timer.c    **** void timers_init(void)
  57:../timer.c    **** {
 2770              		.loc 1 57 0
 2771              		.cfi_startproc
 2772              		@ Function supports interworking.
 2773              		@ args = 0, pretend = 0, frame = 0
 2774              		@ frame_needed = 1, uses_anonymous_args = 0
 2775 0208 0DC0A0E1 		mov	ip, sp
 2776              	.LCFI4:
 2777              		.cfi_def_cfa_register 12
 2778 020c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2779 0210 04B04CE2 		sub	fp, ip, #4
 2780              		.cfi_offset 14, -8
 2781              		.cfi_offset 13, -12
 2782              		.cfi_offset 11, -16
 2783              	.LCFI5:
 2784              		.cfi_def_cfa 11, 4
  58:../timer.c    **** 	random_number_generator();
 2785              		.loc 1 58 0
 2786 0214 FEFFFFEB 		bl	random_number_generator
  59:../timer.c    **** 	cont = 3;
 2787              		.loc 1 59 0
 2788 0218 E4319FE5 		ldr	r3, .L15
 2789 021c 0320A0E3 		mov	r2, #3
 2790 0220 002083E5 		str	r2, [r3, #0]
  60:../timer.c    **** 	rINTMOD = 0x0; //enable IRQ
 2791              		.loc 1 60 0
 2792 0224 DC319FE5 		ldr	r3, .L15+4
 2793 0228 0020A0E3 		mov	r2, #0
 2794 022c 002083E5 		str	r2, [r3, #0]
  61:../timer.c    **** 	rINTCON = 0x1; //enable IRQ pin and vect.
 2795              		.loc 1 61 0
 2796 0230 1E36A0E3 		mov	r3, #31457280
 2797 0234 0120A0E3 		mov	r2, #1
 2798 0238 002083E5 		str	r2, [r3, #0]
  62:../timer.c    **** 	pISR_TIMER0=(unsigned)timer0_ISR;
 2799              		.loc 1 62 0
 2800 023c C8319FE5 		ldr	r3, .L15+8
 2801 0240 C8219FE5 		ldr	r2, .L15+12
 2802 0244 002083E5 		str	r2, [r3, #0]
  63:../timer.c    **** 	pISR_TIMER1=(unsigned)timer1_ISR;
 2803              		.loc 1 63 0
 2804 0248 C4319FE5 		ldr	r3, .L15+16
 2805 024c C4219FE5 		ldr	r2, .L15+20
 2806 0250 002083E5 		str	r2, [r3, #0]
  64:../timer.c    **** 	//pISR_TIMER2=(unsigned)timer2_ISR;
  65:../timer.c    **** 	pISR_TIMER4=(unsigned)timer4_ISR;
 2807              		.loc 1 65 0
 2808 0254 C0319FE5 		ldr	r3, .L15+24
 2809 0258 C0219FE5 		ldr	r2, .L15+28
 2810 025c 002083E5 		str	r2, [r3, #0]
  66:../timer.c    **** 	rTCFG0 = rTCFG0 | 0xFFFFFF; //prescaler value 255
 2811              		.loc 1 66 0
 2812 0260 BC219FE5 		ldr	r2, .L15+32
 2813 0264 B8319FE5 		ldr	r3, .L15+32
 2814 0268 003093E5 		ldr	r3, [r3, #0]
 2815 026c 233CE0E1 		mvn	r3, r3, lsr #24
 2816 0270 033CE0E1 		mvn	r3, r3, asl #24
 2817 0274 003082E5 		str	r3, [r2, #0]
  67:../timer.c    **** 	rTCFG1 = rTCFG1 & 0xFF3F0F4; //divisor value, 1/16 timer4, 1/2 timer2, 1/32 timer0
 2818              		.loc 1 67 0
 2819 0278 A8219FE5 		ldr	r2, .L15+36
 2820 027c A4319FE5 		ldr	r3, .L15+36
 2821 0280 001093E5 		ldr	r1, [r3, #0]
 2822 0284 A0319FE5 		ldr	r3, .L15+40
 2823 0288 033001E0 		and	r3, r1, r3
 2824 028c 003082E5 		str	r3, [r2, #0]
  68:../timer.c    **** 	//Timer count buffer registers
  69:../timer.c    **** 	rTCNTB0 = 65535; //timer0
 2825              		.loc 1 69 0
 2826 0290 98319FE5 		ldr	r3, .L15+44
 2827 0294 98219FE5 		ldr	r2, .L15+48
 2828 0298 002083E5 		str	r2, [r3, #0]
  70:../timer.c    **** 	rTCNTB1 = 65535; //timer1
 2829              		.loc 1 70 0
 2830 029c 94319FE5 		ldr	r3, .L15+52
 2831 02a0 8C219FE5 		ldr	r2, .L15+48
 2832 02a4 002083E5 		str	r2, [r3, #0]
  71:../timer.c    **** 	rTCNTB2 = 65535; //timer2
 2833              		.loc 1 71 0
 2834 02a8 8C319FE5 		ldr	r3, .L15+56
 2835 02ac 80219FE5 		ldr	r2, .L15+48
 2836 02b0 002083E5 		str	r2, [r3, #0]
  72:../timer.c    **** 	rTCNTB4 = 65535; //timer4
 2837              		.loc 1 72 0
 2838 02b4 84319FE5 		ldr	r3, .L15+60
 2839 02b8 74219FE5 		ldr	r2, .L15+48
 2840 02bc 002083E5 		str	r2, [r3, #0]
  73:../timer.c    **** 	//Timer compare buffer registers
  74:../timer.c    **** 	rTCMPB0 = 12800; //timer0
 2841              		.loc 1 74 0
 2842 02c0 7C319FE5 		ldr	r3, .L15+64
 2843 02c4 322CA0E3 		mov	r2, #12800
 2844 02c8 002083E5 		str	r2, [r3, #0]
  75:../timer.c    **** 	rTCMPB1 = 12800; //timer0
 2845              		.loc 1 75 0
 2846 02cc 74319FE5 		ldr	r3, .L15+68
 2847 02d0 322CA0E3 		mov	r2, #12800
 2848 02d4 002083E5 		str	r2, [r3, #0]
  76:../timer.c    **** 	rTCMPB2 = 12800; //timer2
 2849              		.loc 1 76 0
 2850 02d8 6C319FE5 		ldr	r3, .L15+72
 2851 02dc 322CA0E3 		mov	r2, #12800
 2852 02e0 002083E5 		str	r2, [r3, #0]
  77:../timer.c    **** 	rTCMPB4 = 12800; //timer4
 2853              		.loc 1 77 0
 2854 02e4 64319FE5 		ldr	r3, .L15+76
 2855 02e8 322CA0E3 		mov	r2, #12800
 2856 02ec 002083E5 		str	r2, [r3, #0]
  78:../timer.c    **** 	//Enable timer0, timer2 interrupts
  79:../timer.c    **** 	rINTMSK = rINTMSK & ~(BIT_TIMER0 | BIT_TIMER2 | BIT_GLOBAL);
 2857              		.loc 1 79 0
 2858 02f0 5C219FE5 		ldr	r2, .L15+80
 2859 02f4 58319FE5 		ldr	r3, .L15+80
 2860 02f8 003093E5 		ldr	r3, [r3, #0]
 2861 02fc 0133C3E3 		bic	r3, r3, #67108864
 2862 0300 0A3BC3E3 		bic	r3, r3, #10240
 2863 0304 003082E5 		str	r3, [r2, #0]
  80:../timer.c    **** 	/*Timer0 conf*/
  81:../timer.c    **** 	rTCON = rTCON | (0x01<<1);    // timer0 manual_update
 2864              		.loc 1 81 0
 2865 0308 48319FE5 		ldr	r3, .L15+84
 2866 030c 44219FE5 		ldr	r2, .L15+84
 2867 0310 002092E5 		ldr	r2, [r2, #0]
 2868 0314 022082E3 		orr	r2, r2, #2
 2869 0318 002083E5 		str	r2, [r3, #0]
  82:../timer.c    **** 	rTCON = rTCON & ~(0x01<<1);   // timer0 disable manual_update
 2870              		.loc 1 82 0
 2871 031c 34319FE5 		ldr	r3, .L15+84
 2872 0320 30219FE5 		ldr	r2, .L15+84
 2873 0324 002092E5 		ldr	r2, [r2, #0]
 2874 0328 0220C2E3 		bic	r2, r2, #2
 2875 032c 002083E5 		str	r2, [r3, #0]
  83:../timer.c    **** 	rTCON = rTCON | (0x01<<3);    // timer0 auto-reload
 2876              		.loc 1 83 0
 2877 0330 20319FE5 		ldr	r3, .L15+84
 2878 0334 1C219FE5 		ldr	r2, .L15+84
 2879 0338 002092E5 		ldr	r2, [r2, #0]
 2880 033c 082082E3 		orr	r2, r2, #8
 2881 0340 002083E5 		str	r2, [r3, #0]
  84:../timer.c    **** 	rTCON = rTCON | (0x01<<0);    // timer0 start
 2882              		.loc 1 84 0
 2883 0344 0C319FE5 		ldr	r3, .L15+84
 2884 0348 08219FE5 		ldr	r2, .L15+84
 2885 034c 002092E5 		ldr	r2, [r2, #0]
 2886 0350 012082E3 		orr	r2, r2, #1
 2887 0354 002083E5 		str	r2, [r3, #0]
  85:../timer.c    **** 	/*Timer1 conf*/
  86:../timer.c    **** 	rTCON = rTCON | (0x01<<9);    // timer1 manual_update
 2888              		.loc 1 86 0
 2889 0358 F8309FE5 		ldr	r3, .L15+84
 2890 035c F4209FE5 		ldr	r2, .L15+84
 2891 0360 002092E5 		ldr	r2, [r2, #0]
 2892 0364 022C82E3 		orr	r2, r2, #512
 2893 0368 002083E5 		str	r2, [r3, #0]
  87:../timer.c    **** 	rTCON = rTCON & ~(0x01<<9);   // timer1 disable manual_update
 2894              		.loc 1 87 0
 2895 036c E4309FE5 		ldr	r3, .L15+84
 2896 0370 E0209FE5 		ldr	r2, .L15+84
 2897 0374 002092E5 		ldr	r2, [r2, #0]
 2898 0378 022CC2E3 		bic	r2, r2, #512
 2899 037c 002083E5 		str	r2, [r3, #0]
  88:../timer.c    **** 	rTCON = rTCON | (0x01<<11);    // timer1 auto-reload
 2900              		.loc 1 88 0
 2901 0380 D0309FE5 		ldr	r3, .L15+84
 2902 0384 CC209FE5 		ldr	r2, .L15+84
 2903 0388 002092E5 		ldr	r2, [r2, #0]
 2904 038c 022B82E3 		orr	r2, r2, #2048
 2905 0390 002083E5 		str	r2, [r3, #0]
  89:../timer.c    **** 	rTCON = rTCON | (0x01<<8);    // timer1 start
 2906              		.loc 1 89 0
 2907 0394 BC309FE5 		ldr	r3, .L15+84
 2908 0398 B8209FE5 		ldr	r2, .L15+84
 2909 039c 002092E5 		ldr	r2, [r2, #0]
 2910 03a0 012C82E3 		orr	r2, r2, #256
 2911 03a4 002083E5 		str	r2, [r3, #0]
  90:../timer.c    **** 	/*Timer2 conf*/
  91:../timer.c    **** 	/*rTCON = rTCON | (0x01<<13);   // timer2 manual_update
  92:../timer.c    **** 	rTCON = rTCON & ~(0x01<<13);  // timer2 disable manual_update
  93:../timer.c    **** 	rTCON = rTCON | (0x01<<15);   // timer2 auto-reload
  94:../timer.c    **** 	rTCON = rTCON | (0x01<<12);   // timer2 start 
  95:../timer.c    **** 	/*Timer4 conf*/
  96:../timer.c    **** 	rTCON = rTCON | (0x01<<21);   // timer4 manual_update
 2912              		.loc 1 96 0
 2913 03a8 A8309FE5 		ldr	r3, .L15+84
 2914 03ac A4209FE5 		ldr	r2, .L15+84
 2915 03b0 002092E5 		ldr	r2, [r2, #0]
 2916 03b4 022682E3 		orr	r2, r2, #2097152
 2917 03b8 002083E5 		str	r2, [r3, #0]
  97:../timer.c    **** 	rTCON = rTCON & ~(0x01<<21);  // timer4 disable manual_update
 2918              		.loc 1 97 0
 2919 03bc 94309FE5 		ldr	r3, .L15+84
 2920 03c0 90209FE5 		ldr	r2, .L15+84
 2921 03c4 002092E5 		ldr	r2, [r2, #0]
 2922 03c8 0226C2E3 		bic	r2, r2, #2097152
 2923 03cc 002083E5 		str	r2, [r3, #0]
  98:../timer.c    **** 	rTCON = rTCON | (0x1<<23);    // timer4 auto-reload
 2924              		.loc 1 98 0
 2925 03d0 80309FE5 		ldr	r3, .L15+84
 2926 03d4 7C209FE5 		ldr	r2, .L15+84
 2927 03d8 002092E5 		ldr	r2, [r2, #0]
 2928 03dc 022582E3 		orr	r2, r2, #8388608
 2929 03e0 002083E5 		str	r2, [r3, #0]
  99:../timer.c    **** 	rTCON = rTCON | (0x01<<20);   // timer4 start
 2930              		.loc 1 99 0
 2931 03e4 6C309FE5 		ldr	r3, .L15+84
 2932 03e8 68209FE5 		ldr	r2, .L15+84
 2933 03ec 002092E5 		ldr	r2, [r2, #0]
 2934 03f0 012682E3 		orr	r2, r2, #1048576
 2935 03f4 002083E5 		str	r2, [r3, #0]
 100:../timer.c    **** 	
 101:../timer.c    **** 	/*All together
 102:../timer.c    **** 	rTCON = rTCON | (0x01<<1);    // timer0 manual_update
 103:../timer.c    **** 	rTCON = rTCON & ~(0x01<<1);   // timer0 disable manual_update
 104:../timer.c    **** 	rTCON = rTCON | (0x01<<13);   // timer2 manual_update
 105:../timer.c    **** 	rTCON = rTCON & ~(0x01<<13);  // timer2 disable manual_update
 106:../timer.c    **** 	rTCON = rTCON | (0x01<<21);   // timer4 manual_update
 107:../timer.c    **** 	rTCON = rTCON & ~(0x01<<21);  // timer4 disable manual_update
 108:../timer.c    **** 	rTCON = rTCON | 0x808008;     //timer0 timer2 timer4 autoreload
 109:../timer.c    **** 	rTCON = rTCON | 0x1001;     //timer0 timer2 start
 110:../timer.c    **** 	*/
 111:../timer.c    **** 
 112:../timer.c    **** }
 2936              		.loc 1 112 0
 2937 03f8 0CD04BE2 		sub	sp, fp, #12
 2938 03fc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2939 0400 1EFF2FE1 		bx	lr
 2940              	.L16:
 2941              		.align	2
 2942              	.L15:
 2943 0404 00000000 		.word	cont
 2944 0408 0800E001 		.word	31457288
 2945 040c 54FF7F0C 		.word	209715028
 2946 0410 00000000 		.word	timer0_ISR
 2947 0414 50FF7F0C 		.word	209715024
 2948 0418 00000000 		.word	timer1_ISR
 2949 041c 44FF7F0C 		.word	209715012
 2950 0420 00000000 		.word	timer4_ISR
 2951 0424 0000D501 		.word	30736384
 2952 0428 0400D501 		.word	30736388
 2953 042c F4F0F30F 		.word	267645172
 2954 0430 0C00D501 		.word	30736396
 2955 0434 FFFF0000 		.word	65535
 2956 0438 1800D501 		.word	30736408
 2957 043c 2400D501 		.word	30736420
 2958 0440 3C00D501 		.word	30736444
 2959 0444 1000D501 		.word	30736400
 2960 0448 1C00D501 		.word	30736412
 2961 044c 2800D501 		.word	30736424
 2962 0450 4000D501 		.word	30736448
 2963 0454 0C00E001 		.word	31457292
 2964 0458 0800D501 		.word	30736392
 2965              		.cfi_endproc
 2966              	.LFE2:
 2968              		.align	2
 2969              		.global	timer0_ISR
 2971              	timer0_ISR:
 2972              	.LFB3:
 113:../timer.c    **** 
 114:../timer.c    **** void timer0_ISR(void)
 115:../timer.c    **** {
 2973              		.loc 1 115 0
 2974              		.cfi_startproc
 2975              		@ Interrupt Service Routine.
 2976              		@ args = 0, pretend = 0, frame = 0
 2977              		@ frame_needed = 1, uses_anonymous_args = 0
 2978 045c 04C02DE5 		str	ip, [sp, #-4]!
 2979 0460 0DC0A0E1 		mov	ip, sp
 2980              	.LCFI6:
 2981              		.cfi_def_cfa_register 12
 2982 0464 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 2983 0468 04B04CE2 		sub	fp, ip, #4
 2984              		.cfi_offset 14, -8
 2985              		.cfi_offset 13, -12
 2986              		.cfi_offset 11, -16
 2987              		.cfi_offset 3, -20
 2988              		.cfi_offset 2, -24
 2989              		.cfi_offset 1, -28
 2990              		.cfi_offset 0, -32
 2991              	.LCFI7:
 2992              		.cfi_def_cfa 11, 4
 116:../timer.c    **** 	DelayMs(100);
 2993              		.loc 1 116 0
 2994 046c 6400A0E3 		mov	r0, #100
 2995 0470 FEFFFFEB 		bl	DelayMs
 117:../timer.c    **** 	cont--;
 2996              		.loc 1 117 0
 2997 0474 84309FE5 		ldr	r3, .L19
 2998 0478 003093E5 		ldr	r3, [r3, #0]
 2999 047c 012043E2 		sub	r2, r3, #1
 3000 0480 78309FE5 		ldr	r3, .L19
 3001 0484 002083E5 		str	r2, [r3, #0]
 118:../timer.c    **** 	D8Led_symbol(numbers[cont]);
 3002              		.loc 1 118 0
 3003 0488 70309FE5 		ldr	r3, .L19
 3004 048c 002093E5 		ldr	r2, [r3, #0]
 3005 0490 6C309FE5 		ldr	r3, .L19+4
 3006 0494 023193E7 		ldr	r3, [r3, r2, asl #2]
 3007 0498 0300A0E1 		mov	r0, r3
 3008 049c FEFFFFEB 		bl	D8Led_symbol
 119:../timer.c    **** 	if (cont == 0) {
 3009              		.loc 1 119 0
 3010 04a0 58309FE5 		ldr	r3, .L19
 3011 04a4 003093E5 		ldr	r3, [r3, #0]
 3012 04a8 000053E3 		cmp	r3, #0
 3013 04ac 0C00001A 		bne	.L18
 120:../timer.c    **** 		rINTMSK = rINTMSK | BIT_TIMER0; //disable timer0
 3014              		.loc 1 120 0
 3015 04b0 50309FE5 		ldr	r3, .L19+8
 3016 04b4 4C209FE5 		ldr	r2, .L19+8
 3017 04b8 002092E5 		ldr	r2, [r2, #0]
 3018 04bc 022A82E3 		orr	r2, r2, #8192
 3019 04c0 002083E5 		str	r2, [r3, #0]
 121:../timer.c    **** 		rI_ISPC = BIT_TIMER0;
 3020              		.loc 1 121 0
 3021 04c4 40309FE5 		ldr	r3, .L19+12
 3022 04c8 022AA0E3 		mov	r2, #8192
 3023 04cc 002083E5 		str	r2, [r3, #0]
 122:../timer.c    **** 		//key = -1;
 123:../timer.c    **** 		//DelayMs(200);
 124:../timer.c    **** 		//rINTMSK = rINTMSK & ~(BIT_TIMER4); //enable timer4
 125:../timer.c    **** 		rINTMSK = rINTMSK & ~(BIT_TIMER1); //enable timer1
 3024              		.loc 1 125 0
 3025 04d0 30309FE5 		ldr	r3, .L19+8
 3026 04d4 2C209FE5 		ldr	r2, .L19+8
 3027 04d8 002092E5 		ldr	r2, [r2, #0]
 3028 04dc 012AC2E3 		bic	r2, r2, #4096
 3029 04e0 002083E5 		str	r2, [r3, #0]
 3030              	.L18:
 126:../timer.c    **** 	}
 127:../timer.c    **** 	rI_ISPC = BIT_TIMER0;
 3031              		.loc 1 127 0
 3032 04e4 20309FE5 		ldr	r3, .L19+12
 3033 04e8 022AA0E3 		mov	r2, #8192
 3034 04ec 002083E5 		str	r2, [r3, #0]
 128:../timer.c    **** }
 3035              		.loc 1 128 0
 3036 04f0 1CD04BE2 		sub	sp, fp, #28
 3037 04f4 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3038 04f8 04C09DE4 		ldmfd	sp!, {ip}
 3039 04fc 04F05EE2 		subs	pc, lr, #4
 3040              	.L20:
 3041              		.align	2
 3042              	.L19:
 3043 0500 00000000 		.word	cont
 3044 0504 00000000 		.word	numbers
 3045 0508 0C00E001 		.word	31457292
 3046 050c 2400E001 		.word	31457316
 3047              		.cfi_endproc
 3048              	.LFE3:
 3050              		.align	2
 3051              		.global	timer1_ISR
 3053              	timer1_ISR:
 3054              	.LFB4:
 129:../timer.c    **** 
 130:../timer.c    **** void timer1_ISR(void)
 131:../timer.c    **** {
 3055              		.loc 1 131 0
 3056              		.cfi_startproc
 3057              		@ Interrupt Service Routine.
 3058              		@ args = 0, pretend = 0, frame = 0
 3059              		@ frame_needed = 1, uses_anonymous_args = 0
 3060 0510 04C02DE5 		str	ip, [sp, #-4]!
 3061 0514 0DC0A0E1 		mov	ip, sp
 3062              	.LCFI8:
 3063              		.cfi_def_cfa_register 12
 3064 0518 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 3065 051c 04B04CE2 		sub	fp, ip, #4
 3066              		.cfi_offset 14, -8
 3067              		.cfi_offset 13, -12
 3068              		.cfi_offset 11, -16
 3069              		.cfi_offset 3, -20
 3070              		.cfi_offset 2, -24
 3071              		.cfi_offset 1, -28
 3072              		.cfi_offset 0, -32
 3073              	.LCFI9:
 3074              		.cfi_def_cfa 11, 4
 132:../timer.c    **** 	rINTMSK = rINTMSK & ~(BIT_TIMER4); //enable timer4
 3075              		.loc 1 132 0
 3076 0520 44309FE5 		ldr	r3, .L22
 3077 0524 40209FE5 		ldr	r2, .L22
 3078 0528 002092E5 		ldr	r2, [r2, #0]
 3079 052c 022CC2E3 		bic	r2, r2, #512
 3080 0530 002083E5 		str	r2, [r3, #0]
 133:../timer.c    **** 	DelayMs(500);
 3081              		.loc 1 133 0
 3082 0534 7D0FA0E3 		mov	r0, #500
 3083 0538 FEFFFFEB 		bl	DelayMs
 134:../timer.c    **** 	rINTMSK = rINTMSK | BIT_TIMER1; //disable timer1
 3084              		.loc 1 134 0
 3085 053c 28309FE5 		ldr	r3, .L22
 3086 0540 24209FE5 		ldr	r2, .L22
 3087 0544 002092E5 		ldr	r2, [r2, #0]
 3088 0548 012A82E3 		orr	r2, r2, #4096
 3089 054c 002083E5 		str	r2, [r3, #0]
 135:../timer.c    **** 	rI_ISPC = BIT_TIMER1;
 3090              		.loc 1 135 0
 3091 0550 18309FE5 		ldr	r3, .L22+4
 3092 0554 012AA0E3 		mov	r2, #4096
 3093 0558 002083E5 		str	r2, [r3, #0]
 136:../timer.c    **** }
 3094              		.loc 1 136 0
 3095 055c 1CD04BE2 		sub	sp, fp, #28
 3096 0560 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3097 0564 04C09DE4 		ldmfd	sp!, {ip}
 3098 0568 04F05EE2 		subs	pc, lr, #4
 3099              	.L23:
 3100              		.align	2
 3101              	.L22:
 3102 056c 0C00E001 		.word	31457292
 3103 0570 2400E001 		.word	31457316
 3104              		.cfi_endproc
 3105              	.LFE4:
 3107              		.align	2
 3108              		.global	timer2_ISR
 3110              	timer2_ISR:
 3111              	.LFB5:
 137:../timer.c    **** 
 138:../timer.c    **** void timer2_ISR(void)
 139:../timer.c    **** {
 3112              		.loc 1 139 0
 3113              		.cfi_startproc
 3114              		@ Interrupt Service Routine.
 3115              		@ args = 0, pretend = 0, frame = 0
 3116              		@ frame_needed = 1, uses_anonymous_args = 0
 3117 0574 04C02DE5 		str	ip, [sp, #-4]!
 3118 0578 0DC0A0E1 		mov	ip, sp
 3119              	.LCFI10:
 3120              		.cfi_def_cfa_register 12
 3121 057c 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 3122 0580 04B04CE2 		sub	fp, ip, #4
 3123              		.cfi_offset 14, -8
 3124              		.cfi_offset 13, -12
 3125              		.cfi_offset 11, -16
 3126              		.cfi_offset 3, -20
 3127              		.cfi_offset 2, -24
 3128              		.cfi_offset 1, -28
 3129              		.cfi_offset 0, -32
 3130              	.LCFI11:
 3131              		.cfi_def_cfa 11, 4
 140:../timer.c    **** 	if (row) {
 3132              		.loc 1 140 0
 3133 0584 48309FE5 		ldr	r3, .L27
 3134 0588 003093E5 		ldr	r3, [r3, #0]
 3135 058c 000053E3 		cmp	r3, #0
 3136 0590 0400000A 		beq	.L25
 3137              	.LBB6:
 141:../timer.c    **** 	    led1_on();
 3138              		.loc 1 141 0
 3139 0594 FEFFFFEB 		bl	led1_on
 142:../timer.c    **** 	    DelayMs(30);
 3140              		.loc 1 142 0
 3141 0598 1E00A0E3 		mov	r0, #30
 3142 059c FEFFFFEB 		bl	DelayMs
 143:../timer.c    **** 	    led1_off();
 3143              		.loc 1 143 0
 3144 05a0 FEFFFFEB 		bl	led1_off
 3145 05a4 030000EA 		b	.L26
 3146              	.L25:
 3147              	.LBE6:
 3148              	.LBB7:
 144:../timer.c    **** 	}
 145:../timer.c    **** 	else {
 146:../timer.c    **** 	    led2_on();
 3149              		.loc 1 146 0
 3150 05a8 FEFFFFEB 		bl	led2_on
 147:../timer.c    **** 	    DelayMs(30);
 3151              		.loc 1 147 0
 3152 05ac 1E00A0E3 		mov	r0, #30
 3153 05b0 FEFFFFEB 		bl	DelayMs
 148:../timer.c    **** 	    led2_off();
 3154              		.loc 1 148 0
 3155 05b4 FEFFFFEB 		bl	led2_off
 3156              	.L26:
 3157              	.LBE7:
 149:../timer.c    **** 	}
 150:../timer.c    **** 	rI_ISPC = BIT_TIMER2;
 3158              		.loc 1 150 0
 3159 05b8 18309FE5 		ldr	r3, .L27+4
 3160 05bc 022BA0E3 		mov	r2, #2048
 3161 05c0 002083E5 		str	r2, [r3, #0]
 151:../timer.c    **** }
 3162              		.loc 1 151 0
 3163 05c4 1CD04BE2 		sub	sp, fp, #28
 3164 05c8 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3165 05cc 04C09DE4 		ldmfd	sp!, {ip}
 3166 05d0 04F05EE2 		subs	pc, lr, #4
 3167              	.L28:
 3168              		.align	2
 3169              	.L27:
 3170 05d4 00000000 		.word	row
 3171 05d8 2400E001 		.word	31457316
 3172              		.cfi_endproc
 3173              	.LFE5:
 3175              		.align	2
 3176              		.global	timer4_ISR
 3178              	timer4_ISR:
 3179              	.LFB6:
 152:../timer.c    **** 
 153:../timer.c    **** void timer4_ISR(void)
 154:../timer.c    **** {
 3180              		.loc 1 154 0
 3181              		.cfi_startproc
 3182              		@ Interrupt Service Routine.
 3183              		@ args = 0, pretend = 0, frame = 0
 3184              		@ frame_needed = 1, uses_anonymous_args = 0
 3185 05dc 04C02DE5 		str	ip, [sp, #-4]!
 3186 05e0 0DC0A0E1 		mov	ip, sp
 3187              	.LCFI12:
 3188              		.cfi_def_cfa_register 12
 3189 05e4 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 3190 05e8 04B04CE2 		sub	fp, ip, #4
 3191              		.cfi_offset 14, -8
 3192              		.cfi_offset 13, -12
 3193              		.cfi_offset 11, -16
 3194              		.cfi_offset 3, -20
 3195              		.cfi_offset 2, -24
 3196              		.cfi_offset 1, -28
 3197              		.cfi_offset 0, -32
 3198              	.LCFI13:
 3199              		.cfi_def_cfa 11, 4
 155:../timer.c    **** 	DelayMs(200);
 3200              		.loc 1 155 0
 3201 05ec C800A0E3 		mov	r0, #200
 3202 05f0 FEFFFFEB 		bl	DelayMs
 156:../timer.c    **** 	/*Check if keyboard was pressed*/
 157:../timer.c    **** 	if (key == -1 || key != numbers[3]) //mistake
 3203              		.loc 1 157 0
 3204 05f4 A0309FE5 		ldr	r3, .L33
 3205 05f8 003093E5 		ldr	r3, [r3, #0]
 3206 05fc 010073E3 		cmn	r3, #1
 3207 0600 0500000A 		beq	.L30
 3208              		.loc 1 157 0 is_stmt 0 discriminator 1
 3209 0604 94309FE5 		ldr	r3, .L33+4
 3210 0608 0C2093E5 		ldr	r2, [r3, #12]
 3211 060c 88309FE5 		ldr	r3, .L33
 3212 0610 003093E5 		ldr	r3, [r3, #0]
 3213 0614 030052E1 		cmp	r2, r3
 3214 0618 0400000A 		beq	.L31
 3215              	.L30:
 158:../timer.c    **** 	    D8Led_symbol(numbers[3]);
 3216              		.loc 1 158 0 is_stmt 1
 3217 061c 7C309FE5 		ldr	r3, .L33+4
 3218 0620 0C3093E5 		ldr	r3, [r3, #12]
 3219 0624 0300A0E1 		mov	r0, r3
 3220 0628 FEFFFFEB 		bl	D8Led_symbol
 3221 062c 030000EA 		b	.L32
 3222              	.L31:
 159:../timer.c    **** 	else
 160:../timer.c    **** 	    D8Led_symbol_correct(numbers[3]);
 3223              		.loc 1 160 0
 3224 0630 68309FE5 		ldr	r3, .L33+4
 3225 0634 0C3093E5 		ldr	r3, [r3, #12]
 3226 0638 0300A0E1 		mov	r0, r3
 3227 063c FEFFFFEB 		bl	D8Led_symbol_correct
 3228              	.L32:
 161:../timer.c    **** 	rINTMSK = rINTMSK | BIT_TIMER4; //disable timer4
 3229              		.loc 1 161 0
 3230 0640 5C309FE5 		ldr	r3, .L33+8
 3231 0644 58209FE5 		ldr	r2, .L33+8
 3232 0648 002092E5 		ldr	r2, [r2, #0]
 3233 064c 022C82E3 		orr	r2, r2, #512
 3234 0650 002083E5 		str	r2, [r3, #0]
 162:../timer.c    **** 	rI_ISPC = BIT_TIMER4;
 3235              		.loc 1 162 0
 3236 0654 4C309FE5 		ldr	r3, .L33+12
 3237 0658 022CA0E3 		mov	r2, #512
 3238 065c 002083E5 		str	r2, [r3, #0]
 163:../timer.c    **** 	DelayMs(1200);
 3239              		.loc 1 163 0
 3240 0660 4B0EA0E3 		mov	r0, #1200
 3241 0664 FEFFFFEB 		bl	DelayMs
 164:../timer.c    **** 	random_number_generator();
 3242              		.loc 1 164 0
 3243 0668 FEFFFFEB 		bl	random_number_generator
 165:../timer.c    **** 	cont = 3;
 3244              		.loc 1 165 0
 3245 066c 38309FE5 		ldr	r3, .L33+16
 3246 0670 0320A0E3 		mov	r2, #3
 3247 0674 002083E5 		str	r2, [r3, #0]
 166:../timer.c    **** 	rINTMSK = rINTMSK & ~(BIT_TIMER0); //enable timer0
 3248              		.loc 1 166 0
 3249 0678 24309FE5 		ldr	r3, .L33+8
 3250 067c 20209FE5 		ldr	r2, .L33+8
 3251 0680 002092E5 		ldr	r2, [r2, #0]
 3252 0684 022AC2E3 		bic	r2, r2, #8192
 3253 0688 002083E5 		str	r2, [r3, #0]
 167:../timer.c    **** }
 3254              		.loc 1 167 0
 3255 068c 1CD04BE2 		sub	sp, fp, #28
 3256 0690 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3257 0694 04C09DE4 		ldmfd	sp!, {ip}
 3258 0698 04F05EE2 		subs	pc, lr, #4
 3259              	.L34:
 3260              		.align	2
 3261              	.L33:
 3262 069c 00000000 		.word	key
 3263 06a0 00000000 		.word	numbers
 3264 06a4 0C00E001 		.word	31457292
 3265 06a8 2400E001 		.word	31457316
 3266 06ac 00000000 		.word	cont
 3267              		.cfi_endproc
 3268              	.LFE6:
 3270              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
                            *COM*:00000004 cont
                            *COM*:00000010 numbers
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:2551   .text:00000000 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:2554   .text:00000000 shuffle
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:2656   .text:00000104 random_number_generator
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:2760   .text:00000200 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:2765   .text:00000208 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:2768   .text:00000208 timers_init
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:2943   .text:00000404 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:2971   .text:0000045c timer0_ISR
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:3053   .text:00000510 timer1_ISR
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:3178   .text:000005dc timer4_ISR
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:2968   .text:0000045c $a
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:3043   .text:00000500 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:3050   .text:00000510 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:3102   .text:0000056c $d
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:3107   .text:00000574 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:3110   .text:00000574 timer2_ISR
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:3170   .text:000005d4 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:3175   .text:000005dc $a
C:\Users\USUARI~1\AppData\Local\Temp\ccIz0kFl.s:3262   .text:0000069c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
rand
row
DelayMs
D8Led_symbol
led1_on
led1_off
led2_on
led2_off
D8Led_symbol_correct
key
